{"abstractText": "Modern digital cameras rely on the sequential execution of separate image processing steps to produce realistic images. The first two steps are usually related to denoising and demosaicking where the former aims to reduce noise from the sensor and the latter converts a series of light intensity readings to color images. Modern approaches try to jointly solve these problems, i.e. joint denoising-demosaicking which is an inherently ill-posed problem given that two-thirds of the intensity information is missing and the rest are perturbed by noise. While there are several machine learning systems that have been recently introduced to solve this problem, the majority of them relies on generic network architectures which do not explicitly take into account the physical image model. In this work we propose a novel algorithm which is inspired by powerful classical image regularization methods, large-scale optimization, and deep learning techniques. Consequently, our derived iterative optimization algorithm, which involves a trainable denoising network, has a transparent and clear interpretation compared to other black-box data driven approaches. Our extensive experimentation line demonstrates that our proposed method outperforms any previous approaches for both noisy and noisefree data across many different datasets. This improvement in reconstruction quality is attributed to the rigorous derivation of an iterative solution and the principled way we design our denoising network architecture, which as a result requires fewer trainable parameters than the current state-of-the-art solution and furthermore can be efficiently trained by using a significantly smaller number of training data than existing deep demosaicking networks.", "authors": [{"affiliations": [], "name": "Filippos Kokkinos"}, {"affiliations": [], "name": "Stamatios Lefkimmiatis"}], "id": "SP:33e270d880ba215bb1c48fde38ad5ca977cc43d5", "references": [{"authors": ["L.Z. Xin Li", "Bahadir Gunturk"], "title": "Image demosaicing: a systematic survey", "venue": "pp. 6822\u20136822\u201315, 2008.", "year": 2008}, {"authors": ["L. Zhang", "X. Wu", "A. Buades", "X. Li"], "title": "Color demosaicking by local directional interpolation and nonlocal adaptive thresholding", "venue": "Journal of Electronic imaging, vol. 20, no. 2, p. 023016, 2011.", "year": 2011}, {"authors": ["J. Duran", "A. Buades"], "title": "Self-similarity and spectral correlation adaptive algorithm for color demosaicking", "venue": "IEEE transactions on image processing, vol. 23, no. 9, pp. 4031\u20134040, 2014.", "year": 2014}, {"authors": ["A. Buades", "B. Coll", "J.-M. Morel", "C. Sbert"], "title": "Self-similarity driven color demosaicking", "venue": "IEEE Transactions on Image Processing, vol. 18, no. 6, pp. 1192\u20131202, 2009.", "year": 2009}, {"authors": ["F. Heide", "M. Steinberger", "Y.-T. Tsai", "M. Rouf", "D. Pajak", "D. Reddy", "O. Gallo", "J. Liu", "W. Heidrich", "K. Egiazarian"], "title": "Flexisp: A flexible camera image processing framework", "venue": "ACM Transactions on Graphics (TOG), vol. 33, no. 6, p. 231, 2014.", "year": 2014}, {"authors": ["K. Chang", "P.L.K. Ding", "B. Li"], "title": "Color image demosaicking using inter-channel correlation and nonlocal self-similarity", "venue": "Signal Processing: Image Communication, vol. 39, pp. 264\u2013279, 2015.", "year": 2015}, {"authors": ["D.S. Tan", "W. Chen", "K. Hua"], "title": "Deepdemosaicking: Adaptive image demosaicking via multiple deep fully convolutional networks", "venue": "IEEE Transactions on Image Processing, vol. 27, no. 5, pp. 2408\u20132419, May 2018.", "year": 2018}, {"authors": ["D. Alleysson", "S. Susstrunk", "J. Herault"], "title": "Linear demosaicing inspired by the human visual system", "venue": "IEEE Transactions on Image Processing, vol. 14, no. 4, pp. 439\u2013449, April 2005.", "year": 2005}, {"authors": ["J. Sun", "M.F. Tappen"], "title": "Separable Markov Random Field Model and Its Applications in low level vision", "venue": "IEEE Transactions on Image Processing, vol. 22, no. 1, pp. 402\u2013407, Jan 2013.", "year": 2013}, {"authors": ["F.-L. He", "Y.-C.F. Wang", "K.-L. Hua"], "title": "Self-learning approach to color demosaicking via support vector regression", "venue": "Image Processing (ICIP), 2012 19th IEEE International Conference on. IEEE, 2012, pp. 2765\u20132768.", "year": 2012}, {"authors": ["D. Khashabi", "S. Nowozin", "J. Jancsary", "A.W. Fitzgibbon"], "title": "Joint Demosaicing and Denoising via Learned Nonparametric random fields", "venue": "IEEE Transactions on Image Processing, vol. 23, no. 12, pp. 4968\u20134981, Dec 2014.", "year": 2014}, {"authors": ["H.Z.H.-O. Oren Kapah"], "title": "Demosaicking using artificial neural networks", "venue": "Proc.SPIE, vol. 3962, pp. 3962 \u2013 3962 \u2013 9, 2000. [Online]. Available: https://doi.org/10.1117/12.382904", "year": 2000}, {"authors": ["J. Go", "C. Lee"], "title": "Interpolation using neural network for digital still cameras", "venue": "pp. 176\u2013177, June 2000.", "year": 2000}, {"authors": ["Y. Wang"], "title": "A multilayer neural network for image demosaicking", "venue": "pp. 1852\u20131856, Oct 2014.", "year": 1852}, {"authors": ["M. Gharbi", "G. Chaurasia", "S. Paris", "F. Durand"], "title": "Deep Joint Demosaicking and Denoising", "venue": "ACM Trans. Graph., vol. 35, no. 6, pp. 191:1\u2013191:12, Nov. 2016.", "year": 2016}, {"authors": ["B. Henz", "E.S.L. Gastal", "M.M. Oliveira"], "title": "Deep joint design of color filter arrays and demosaicing", "venue": "Computer Graphics Forum, vol. 37, no. 2, pp. 389\u2013399. [Online]. Available: https: //onlinelibrary.wiley.com/doi/abs/10.1111/cgf.13370", "year": 1337}, {"authors": ["H.R. Ossi Kalevo"], "title": "Noise reduction techniques for bayer-matrix images", "venue": "pp. 4669 \u2013 4669 \u2013 12, 2002.", "year": 2002}, {"authors": ["S. Farsiu", "M. Elad", "P. Milanfar"], "title": "Multiframe demosaicing and superresolution of color images", "venue": "IEEE Transactions on Image Processing, vol. 15, no. 1, pp. 141\u2013159, Jan 2006.", "year": 2006}, {"authors": ["D. Menon", "G. Calvagno"], "title": "Joint demosaicking and denoisingwith space-varying filters", "venue": "2009 16th IEEE International Conference on Image Processing (ICIP), Nov 2009, pp. 477\u2013480.", "year": 2009}, {"authors": ["L. Zhang", "R. Lukac", "X. Wu", "D. Zhang"], "title": "Pca-based spatially adaptive denoising of CFA images for Single-Sensor Digital Cameras", "venue": "IEEE Transactions on Image Processing, vol. 18, no. 4, pp. 797\u2013812, April 2009.", "year": 2009}, {"authors": ["T. Klatzer", "K. Hammernik", "P. Knobelreiter", "T. Pock"], "title": "Learning joint demosaicing and denoising based on sequential energy minimization", "venue": "2016 IEEE International Conference on Computational Photography (ICCP), May 2016, pp. 1\u201311.", "year": 2016}, {"authors": ["F. Kokkinos", "S. Lefkimmiatis"], "title": "Deep Image Demosaicking using a Cascade of Convolutional Residual Denoising Networks", "venue": "ECCV (to appear). Springer, September 2018.", "year": 2018}, {"authors": ["S. Boyd", "N. Parikh", "E. Chu", "B. Peleato", "J. Eckstein"], "title": "Distributed optimization and statistical learning via the alternating direction method of multipliers", "venue": "Foundations and Trends R \u00a9 in Machine Learning, vol. 3, no. 1, pp. 1\u2013122, 2011.", "year": 2011}, {"authors": ["T. Goldstein", "S. Osher"], "title": "The split Bregman method for l1-regularized problems", "venue": "SIAM journal on imaging sciences, vol. 2, no. 2, pp. 323\u2013 343, 2009.", "year": 2009}, {"authors": ["D.R. Hunter", "K. Lange"], "title": "A tutorial on MM algorithms", "venue": "The American Statistician, vol. 58, no. 1, pp. 30\u201337, 2004.", "year": 2004}, {"authors": ["M.A. Figueiredo", "J.M. Bioucas-Dias", "R.D. Nowak"], "title": "Majorization\u2013 minimization algorithms for wavelet-based image restoration", "venue": "IEEE Transactions on Image processing, vol. 16, no. 12, pp. 2980\u20132991, 2007.", "year": 2007}, {"authors": ["S. Lefkimmiatis", "P. Ward", "M. Unser"], "title": "Hessian Schatten-norm regularization for linear inverse problems", "venue": "IEEE Transactions on Image processing, vol. 22, no. 5, pp. 1873\u20131888, 2013.", "year": 1873}, {"authors": ["Y. Romano", "M. Elad", "P. Milanfar"], "title": "The little engine that could: Regularization by denoising (RED)", "venue": "SIAM Journal on Imaging Sciences, vol. 10, no. 4, pp. 1804\u20131844, 2017.", "year": 1804}, {"authors": ["S.V. Venkatakrishnan", "C.A. Bouman", "B. Wohlberg"], "title": "Plug-and-Play priors for model based reconstruction", "venue": "2013 IEEE Global Conference on Signal and Information Processing, Dec 2013, pp. 945\u2013948.", "year": 2013}, {"authors": ["K. Zhang", "W. Zuo", "S. Gu", "L. Zhang"], "title": "Learning Deep CNN Denoiser Prior for Image Restoration", "venue": "2017 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), July 2017, pp. 2808\u20132817.", "year": 2017}, {"authors": ["K. Zhang", "W. Zuo", "Y. Chen", "D. Meng", "L. Zhang"], "title": "Beyond a Gaussian Denoiser: Residual Learning of Deep CNN for Image Denoising", "venue": "IEEE Transactions on Image Processing, vol. 26, no. 7, pp. 3142\u20133155, July 2017.", "year": 2017}, {"authors": ["S. Lefkimmiatis"], "title": "Universal denoising networks : A Novel CNN Architecture for Image Denoising", "venue": "The IEEE Conference on Computer Vision and Pattern Recognition (CVPR), June 2018.", "year": 2018}, {"authors": ["A. Foi"], "title": "Clipped noisy images: Heteroskedastic modeling and practical denoising", "venue": "Signal Processing, vol. 89, no. 12, pp. 2609\u20132629, 2009.", "year": 2009}, {"authors": ["X. Liu", "M. Tanaka", "M. Okutomi"], "title": "Single-image noise level estimation for blind denoising", "venue": "IEEE transactions on image processing, vol. 22, no. 12, pp. 5226\u20135237, 2013.", "year": 2013}, {"authors": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "title": "Deep residual learning for image recognition", "venue": "Proceedings of the IEEE conference on computer vision and pattern recognition, 2016, pp. 770\u2013778.", "year": 2016}, {"authors": ["A. Beck", "M. Teboulle"], "title": "A fast Iterative Shrinkage-Thresholding Algorithm for Linear Inverse Problems", "venue": "SIAM Journal on Imaging Sciences, vol. 2, no. 1, pp. 183\u2013202, 2009.", "year": 2009}, {"authors": ["H. Li", "Z. Lin"], "title": "Accelerated Proximal Gradient Methods for Nonconvex Programming", "venue": "Advances in Neural Information Processing Systems 28, C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, Eds. Curran Associates, Inc., 2015, pp. 379\u2013387.", "year": 2015}, {"authors": ["Q. Lin", "L. Xiao"], "title": "An adaptive accelerated proximal gradient method and its homotopy continuation for sparse optimization", "venue": "Computational Optimization and Applications, vol. 60, no. 3, pp. 633\u2013674, Apr 2015.", "year": 2015}, {"authors": ["A. Buades", "B. Coll", "J.-M. Morel"], "title": "A non-local algorithm for image denoising", "venue": "Computer Vision and Pattern Recognition, 2005. CVPR 2005. IEEE Computer Society Conference on, vol. 2. IEEE, 2005, pp. 60\u201365.", "year": 2005}, {"authors": ["K. Dabov", "A. Foi", "V. Katkovnik", "K. Egiazarian"], "title": "Image denoising by sparse 3-D transform-domain collaborative filtering", "venue": "IEEE Transactions on image processing, vol. 16, no. 8, pp. 2080\u20132095, 2007.", "year": 2007}, {"authors": ["S.A. Bigdeli", "M. Zwicker", "P. Favaro", "M. Jin"], "title": "Deep meanshift priors for image restoration", "venue": "Advances in Neural Information Processing Systems, 2017, pp. 763\u2013772.", "year": 2017}, {"authors": ["D. Martin", "C. Fowlkes", "D. Tal", "J. Malik"], "title": "A database of human segmented natural images and its application to evaluating segmentation algorithms and measuring ecological statistics", "venue": "Proceedings Eighth IEEE International Conference on Computer Vision. ICCV 2001, vol. 2, 2001, pp. 416\u2013423 vol.2.", "year": 2001}, {"authors": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "title": "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification", "venue": "Proceedings of the IEEE international conference on computer vision, 2015, pp. 1026\u20131034.", "year": 2015}, {"authors": ["S.J. Reddi", "S. Kale", "S. Kumar"], "title": "On the convergence of Adam and Beyond", "venue": "International Conference on Learning Representations, 2018.", "year": 2018}, {"authors": ["A.J. Robinson", "F. Fallside"], "title": "The Utility Driven Dynamic Error Propagation Network", "venue": "Engineering Department, Cambridge University, Cambridge, UK, Tech. Rep. CUED/F-INFENG/TR.1, 1987.", "year": 1987}, {"authors": ["W. Dong", "P. Wang", "W. Yin", "G. Shi", "F. Wu", "X. Lu"], "title": "Denoising Prior Driven Deep Neural Network for Image Restoration", "venue": "CoRR, vol. abs/1801.06756, 2018.", "year": 1801}, {"authors": ["J. Zhang", "B. Ghanem"], "title": "Ista-net: Iterative Shrinkage-Thresholding Algorithm Inspired Deep Network for Image Compressive Sensing", "venue": "CoRR, vol. abs/1706.07929, 2017.", "year": 2017}, {"authors": ["A. Levin", "B. Nadler", "F. Durand", "W.T. Freeman"], "title": "Patch complexity, finite pixel correlations and optimal denoising", "venue": "Computer Vision \u2013 ECCV 2012, A. Fitzgibbon, S. Lazebnik, P. Perona, Y. Sato, and C. Schmid, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2012, pp. 73\u201386.", "year": 2012}, {"authors": ["K. Hirakawa", "T.W. Parks"], "title": "Adaptive homogeneity-directed demosaicing algorithm", "venue": "IEEE Transactions on Image Processing, vol. 14, no. 3, pp. 360\u2013369, March 2005.", "year": 2005}, {"authors": ["P. Getreuer"], "title": "Color demosaicing with contour stencils", "venue": "2011 17th International Conference on Digital Signal Processing (DSP), July 2011, pp. 1\u20136.", "year": 2011}, {"authors": ["D.L. Donoho", "J.M. Johnstone"], "title": "Ideal spatial adaptation by wavelet shrinkage", "venue": "biometrika, vol. 81, no. 3, pp. 425\u2013455, 1994.", "year": 1994}, {"authors": ["I. Daubechies", "M. Defrise", "C. De Mol"], "title": "An iterative thresholding algorithm for linear inverse problems with a sparsity constraint", "venue": "Communications on pure and applied mathematics, vol. 57, no. 11, pp. 1413\u2013 1457, 2004.", "year": 2004}, {"authors": ["B. Gu", "Z. Huo", "H. Huang"], "title": "Inexact Proximal Gradient Methods for Non-convex and Non-smooth optimization", "venue": "2018.", "year": 2018}, {"authors": ["L.I. Rudin", "S. Osher", "E. Fatemi"], "title": "Nonlinear total variation based noise removal algorithms", "venue": "Physica D: nonlinear phenomena, vol. 60, no. 1-4, pp. 259\u2013268, 1992.", "year": 1992}, {"authors": ["S. Lefkimmiatis", "A. Bourguard", "M. Unser"], "title": "Hessian-based norm regularization for image restoration with biomedical applications", "venue": "IEEE Transactions on Image processing, vol. 21, no. 3, pp. 983\u2013995, 2012.", "year": 2012}], "sections": [{"text": "Index Terms\u2014deep learning, denoising, demosaicking, image restoration, proximal methods, majorization-minimization.\nI. INTRODUCTION Traditionally, high-resolution images from a digital camera are the end result of a processing pipeline that transforms light intensity readings to images. The image processing pipeline is typically modular, and the first two and most crucial steps involve image demosaicking and denoising. Due to the modular nature of the pipeline, demosaicking and denoising are dealt in a sequential manner where the ordering will either alter the light intensity readings from the sensor if denoising is applied first, or the initial demosaicking will introduce nonlinearities in the noise statistics rending denoising an even harder problem. Moreover, both of these problems belong to the category of ill-posed problems while their joint treatment is very challenging since two-thirds of the underlying data are missing and the rest are perturbed by noise. Evidently, reconstruction errors during this early stage of the camera pipeline will produce unsatisfying final results.\nF. Kokkinos and S. Lefkimmiatis are with the Center for Computational and Data-Intensive Science and Engineering, Skolkovo Institute of Science and Technology.\nSince demosaicking is an essential step of the camera pipeline, it has been extensively studied. For a complete survey of recent approaches, we refer to [1]. One of the main drawbacks of the currently introduced methods that deal with the demosaicking problem, is that they assume a specific Bayer pattern[1], [2], [3], [4], [5], [6], [7]. This is a rather strong assumption and limits their applicability since there are many cameras available in the market that employ different Color Filter Array (CFA) patterns, for example, Fuji sensors. Therefore, demosaicking methods that are agile and able to generalize to different CFA patterns are preferred.\nTypical methods that work for any CFA are the nearest neighbor and bilinear interpolation of the neighboring values for a given pixel for each channel. The problem with these approaches is the produced zippering artifacts which occur along high-frequency signal changes, e.g., edges and textures. Other classic approaches make use of the self-similarity and redundancy properties of natural images [4], [2], [3], [6] to reconstruct the image, but they require an excessive amount of computation time and thus reducing their applicability to lowresource devices. Another successful class consists of methods that act upon the frequency domain, where any Bayer CFA can be represented as the combination of a luminance component at baseband and two modulated components [8].\nDuring recent years, research is directed towards learning based approaches, although a common problem with the design of learning based demosaicking algorithms is the lack of ground-truth images. In many approaches such as those in [9], [10], [7] the authors used already processed images as references that are simulated mosaicked again, i.e. they apply a mosaick mask on the already demosaicked images, therefore obtaining non-realistic pairs for tuning trainable methods. Under this training strategy, the main issue is that demosaicking artifacts on the training data will hinder the performance and the overall quality of the reconstruction. In a recent work Khasabi et al. [11] proposed a way to produce a dataset with realistic reference images allowing for the design of machine learning demosaicking algorithms. In their work, they thoroughly explained a methodology to create a demosaick dataset which is on par with reality. We use the produced Microsoft Demosaicking dataset [11] to train, evaluate and compare our system. The reason is that the contained images have to be demosaicked in the linear RGB (linRGB) color space of the camera before being transformed via color transformation and gamma correction into standard RGB (sRGB) space that common consumer display devices use. Furthermore, two popular CFA patterns are contained into the dataset, namely the Bayer and Fuji X Trans, which permits ar X iv :1 80 7.\n06 40\n3v 3\n[ cs\n.C V\n] 2\n9 M\nar 2\n01 9\nthe development and evaluation of methods that can deal with different CFA patterns.\nThe effectiveness of neural networks for image demosaicking has been studied for over a decade. In earlier works [12], [13] feed forward neural networks were used on par with dictionary methods in order to obtain adaptive solutions for image demosaicking, while in [14] small patches were used to train a multi-layer neural network minimizing an error function. In a recent work, Gharbi et. al. [15] exploit the advantages in the field of deep learning to create a deep Convolutional Neural Network (CNN) that is able to demosaick images, and a lot of effort was put by the authors to create a new large demosaicking dataset, namely the MIT Demosaicking Dataset which consists of 2.6 million patches of images. Consequently, new CNN approaches were developed extending the usage of CNNs in the field. In Tan et al. [7] an ensemble of CNNs was developed which contained different models trained to demosaick patches with specific attributes, for example, textures and smooth areas, while Henz et al. [16] constructed a convolutional autoencoder which was able to jointly design CFA and demosaick, therefore they obtained a CFA that out-performed the common Bayer CFA for image reconstruction purposes.\nApart from the demosaicking problem, another problem that requires special attention is the elimination of noise arising from the sensor and which distorts the acquired raw data. Firstly, the sensor readings are corrupted with shot noise [17] which is the result of random variation of the detected photons. Second, electronic inefficiencies during reading and converting the electrical charge into a digital count exhibit another type of noise, namely read noise. While shot noise is generally attributed to following a Poisson distribution and the read noise a Gaussian distribution; under certain circumstances, both noises can be approximated by a random variable following a heteroscedastic Gaussian pdf [17]. Prior work from Kalevo and Rantanen [18], analyzed whether denoising should occur before or after the demosaicking step. It was experimentally confirmed that denoising is preferably done before demosaicking, however, Farsiu et al. [19] formulates the solution of a joint estimation process in one step and demonstrates the superiority to an approach that breaks the problem into individual step. Later on, many researchers [20], [21], [22] validated experimentally the advantage of a joint estimation. Motivated by this long-known fact, we also pursue a joint approach for denoising and demosaicking of raw sensor data.\nIn our previous work [23], we proposed an iterative neural network for solving the joint denoising-demosaicking problem that yielded state-of-the-art results on various datasets, both real and synthetic, without the need of millions of training images. In this work, we extend our previous work by dealing with some of its shortcomings while we further improve the reconstruction quality of our results. In detail, the extensions of our earlier work are: (1) A novel training strategy that allows us to train our network for an arbitrary number of iterations. In our previous work and other similar proposed iterative methods for different image restoration problems, the number of iterations is kept to a low number, usually no more than 10, due to memory restrictions. To the best of our knowledge,\nthis is the first work that introduces a strategy that surpasses previous computational limitations and allows the training of iterative networks for an arbitrary number of iterations. The provided quantitative results across various datasets showcase the importance of our training strategy. (2) A modified version of our network that can better adapt to the noise level distorting the input image since it also accepts as a second argument the standard deviation of the noise. In our previous work [23], we handled the noise identically for every image, but as we will present in the sequel, a noise adaptive approach leads to considerable better image reconstruction quality. (3) Finally, we perform an extensive line of experimentation and ablation study to identify the performance of the proposed method with different configurations such as the number of iterations and the effect of different initialization schemes to the overall quality of the reconstruction."}, {"heading": "II. PROBLEM FORMULATION", "text": "To solve the joint demosaicking-denoising problem, one of the most frequently used approaches in the literature relies on the following linear observation model\ny = Mx + n, (1)\nwhich relates the observed sensor raw data, y \u2208 RN , and the underlying image x \u2208 RN that we aim to restore. Both x and y correspond to the vectorized forms of the images assuming that they have been raster scanned using a lexicographical order. Under this notation, M \u2208 RN\u00d7N is the degradation matrix that models the spatial response of the imaging device, and in particular the CFA pattern. According to this, M corresponds to a square diagonal binary matrix where the zero elements in its diagonal indicate the spatial and channel locations in the image where color information is missing. Apart from the missing color values, the image measurements are also perturbed by noise which hereafter, we will assume that is an i.i.d Gaussian noise n \u223c N (0, \u03c32). Note, that this is a rather simplified assumption about the noise statistics distorting the measurements. Nevertheless, our derived data-driven algorithm will be trained and evaluated on images that are distorted by noise, which follows statistics that better approximate real noisy conditions [17].\nRecovering x from the measurements y belongs to the broad class of linear inverse problems. For the problem under study, the operator M is clearly singular, i.e. not invertible. This fact combined with the presence of noise perturbing the measurements leads to an ill-posed problem where a unique solution does not exist. One popular way to deal with this, is to adopt a Bayesian approach and seek for the Maximum A Posteriori (MAP) estimator\nx? = arg max x log(p(x|y))\n= arg max x\nlog(p(y|x)) + log(p(x)), (2)\nwhere log(p(y|x)) represents the log-likelihood of the observation y and log(p(x)) represents the log-prior of x.\nProblem (2) can be equivalently re-casted as the minimization problem\nx? = arg min x\n1\n2\u03c32 \u2016y \u2212Mx\u201622 + \u03c6(x), (3)\nwhere the first term corresponds to the negative log-likelihood (assuming i.i.d Gaussian noise of variance \u03c32) and the second term corresponds to the negative log-prior. According to the above, the restoration of the underlying image x, boils down to computing the minimizer of the objective function in Eq. (3), which consists of two terms. This problem formulation has also direct links to variational methods where the first term can be interpreted as the data-fidelity that quantifies the proximity of the solution to the observation and the second term can be seen as the regularizer, whose role is to promotes solutions that satisfy certain favorable image properties.\nIn general, the minimization of the objective function\nQ(x) = 1\n2\u03c32 \u2016y \u2212Mx\u201622 + \u03c6(x) (4)\nis far from a trivial task, because the solution cannot simply be obtained by solving a set of linear equations. From the above, it is now clear that there are two important challenges that need to be dealt with before we are in the position of deriving a satisfactory solution for our problem. The first one is to come up with an algorithm that can efficiently minimize Q (x), while the second one is to select an appropriate form for \u03c6 (x), which will constrain the set of admissible solutions by promoting only those that exhibit the desired properties.\nIn Section III, we focus on the first challenge, while in Section IV we discuss how it is possible to avoid making any explicit decisions for the regularizer (or equivalently the negative log-prior) by following a machine learning approach. As we will describe in detail, the proposed strategy will allow us to efficiently regularize our solution but without the need to explicitly learn the form of the regularizer \u03c6 (x)."}, {"heading": "III. MAJORIZATION MINIMIZATION METHOD", "text": "One of the main difficulties in the minimization of the objective function in Eq. (4) is the coupling that exists between the singular degradation operator, M, and the latent image x. To circumvent this difficulty, there are several optimization strategies available that we could use, with potential candidates being splitting variables techniques such as the Alternating Direction Method of Multipliers [24] and the Split Bregman approach [25]. However, one difficulty that arises by using such methods is that they involve additional parameters that need to be tuned so that a satisfactory convergence speed to the solution is achieved. Unfortunately, there is not a simple and straightforward way to choose these parameters. For this reason, in this work, we will instead pursue a majorizationminimization (MM) approach [26], [27], [28], which does not pose such a requirement. Under this framework, as we will describe in detail, instead of obtaining the solution by minimizing (4), we compute it iteratively via the successive minimization of surrogate functions. The surrogate functions provide an upper bound of the initial objective function [26], and they are simpler to deal with than the original objective function.\nSpecifically, in the majorization-minimization (MM) framework, an iterative algorithm for solving the minimization problem\nx\u2217 = arg min x Q (x) (5)\ntakes the form [26]\nx(t+1) = arg min x Q\u0303(x;x(t)), (6)\nwhere Q\u0303(x;x(t)) is the majorizer of the function Q(x) at a fixed point x(t), satisfying the two conditions\nQ\u0303(x;x(t)) > Q(x),\u2200x 6= x(t) and Q\u0303(x(t);x(t)) = Q(x(t)). (7)\nHere, the underlying idea is that instead of minimizing the actual objective function Q(x), we first upper-bound it by a suitable majorizer Q\u0303(x;x(t)), and then minimize this majorizing function to produce the next iterate x(t+1). Given the properties of the majorizer, iteratively minimizing Q\u0303(\u00b7;x(t)) also decreases the objective function Q(\u00b7). In fact, it is not even required that the surrogate function in each iteration is minimized. It is sufficient to find a x(t+1) that only decreases it.\nTo derive a majorizer for Q (x) we opt for a majorizer of the data-fidelity term (negative log-likelihood). In particular, we consider the following majorizer\nd\u0303(x,x0) = 1\n2\u03c32 \u2016y \u2212Mx\u201622 + d(x,x0), (8)\nwhere d(x,x0) = 12\u03c32 (x \u2212 x0) T [\u03b1I \u2212 MTM](x \u2212 x0) is a function that measures the distance between x and x0. Since M is a binary diagonal matrix, it is an idempotent matrix, that is MTM = M, and thus d(x,x0) = 12\u03c32 (x \u2212 x0)\nT [\u03b1I\u2212M](x\u2212x0). According to the conditions in (7), in order d\u0303(x,x0) to be a valid majorizer, we need to ensure that d(x,x0) \u2265 0,\u2200x with equality iff x = x0. This suggests that \u03b1I\u2212M must be a positive definite matrix, which only holds when \u03b1 > \u2016M\u20162 = 1, i.e \u03b1 is bigger than the maximum eigenvalue of the binary diagonal matrix M. Based on the above, by replacing the data-fidelity term in Eq. (4) with the respective majorizer in Eq. (8) and performing the necessary algebraic calculations, the upper-bounded version is finally written as\nQ\u0303(x,x0) = 1\n2(\u03c3/ \u221a \u03b1)2 \u2016x\u2212 z\u201622 + \u03c6(x) + c, (9)\nwhere c = 12\u03c32 (\u2016y\u2016 2 2 + x T 0 (\u03b1I \u2212M)x0 \u2212 \u03b1 \u2016z\u2016 2 2) does not depend on x and thus is a constant, while z = y+(I\u2212M)x0. Notice that following this approach, we have managed to completely decouple the degradation operator M from x and we now need to deal with a simpler problem. In fact, the resulting surrogate function in Eq. (9) can be interpreted as the objective function of a denoising problem, with z being the noisy measurements that are corrupted by noise whose variance is equal to \u03c32/a. This is a key observation that we will heavily rely on, in order to design our deep network architecture. In particular, now it is possible instead of selecting the form of \u03c6 (x) and minimizing the surrogate\nfunction, to employ a denoising neural network in order to compute the solution of the current iteration.\nOur idea is similar in nature to other recent image restoration approaches that have employed denoising networks as part of alternative iterative optimization strategies, such as RED [29], P 3 [30], SEM [22] and IRCNN [31]. However, an important difference is that in our case we completely avoid the introduction of any free parameter that needs to be tuned by the user. We also move one step further from the aforementioned approaches by finetuning our denoising neural network on available data which allows us to implicitly incorporate domain knowledge to our learned regularizer. This direction for solving the joint denoising-demosaicking problem is very appealing since by using training data we can implicitly learn the function \u03c6 (x) and also minimize the corresponding surrogate function using a feed-forward network."}, {"heading": "IV. RESIDUAL DENOISING NETWORK (RESDNET)", "text": "Based on the discussion above, an important part of our approach is the design of a denoising network that will play the role of the solver for the surrogate function in Eq. (9). The architecture of the proposed network is depicted in Fig. 1. This is a residual network similar to DnCNN [32], where the output of the network is subtracted from its input. Therefore, the network itself acts as a noise estimator and its task is to estimate the noise realization that distorts the input. Such network architectures have been shown to lead to better restoration results than alternative approaches [32], [33]. One distinctive difference between our network and DnCNN, which also makes our network suitable to be used as a part of the MM-approach, is that it accepts two inputs, namely the distorted input and the variance of the noise. This way, as we will demonstrate in the sequel, we are able to learn a single set of parameters for our network and to employ the same network to inputs that are distorted by a wide range of noise levels. While the blind version of DnCNN can also work for different noise levels, as opposed to our network it features an internal mechanism to estimate the noise variance. However, when the noise statistics deviate significantly from the training conditions, such a mechanism can fail and thus DnCNN can lead to poor denoising results. In fact, due to this reason in [31], where more general restoration problems than denoising have been studied, the authors of DnCNN use a non-blind variant of their network as a part of their proposed restoration approach. However, training a deep network that requires a large number of parameters to be learned for each noise level can be rather impractical, especially in cases where one would like to employ such networks on devices with limited storage capacities. In our case, inspired by the recent work in [33] we circumvent this limitation by explicitly providing as input to our network the noise variance, which is then used to assist the network so as to provide an accurate estimate of the noise distorting the input. Note that there are several techniques available in the literature that can provide an estimate of the noise variance, such as those described in [34], [35], and thus this requirement does not pose any significant challenges in our approach.\nA ResDNet with depth D, consists of five fundamental blocks. The first block is a convolutional layer with 64 filters whose kernel size is 5\u00d75. The second one is a non-linear block that consists of a parametrized rectified linear unit activation function (PReLU), followed by a convolutional layer with 64 filters of 3 \u00d7 3 kernels. The PReLU function is defined as PReLU(x) = max(0,x) + \u03ba \u2217min(0,x) where \u03ba is a vector whose size is equal to the number of input channels. In our network we use D \u2217 2 distinct non-linear blocks which we connect via a shortcut connection every second block in a similar manner to [36] as shown in Fig. 1. Next, the output of the non-linear stage is processed by a transposed convolution layer which reduces the number of channels from 64 to 3 and has a kernel size of 5 \u00d7 5. Then, it follows a projection layer [33] which accepts as an additional input the noise variance and whose role is to normalize the noise realization estimate so that it will have the correct variance before this is subtracted from the input of the network. Finally, the result is clipped so that the intensities of the output lie in the range [0, 255]. This last layer enforces our prior knowledge about the expected range of valid pixel intensities.\nRegarding implementation details, before each convolutional layer, the input is padded to make sure that each feature map has the same spatial size as the input image. However, unlike the common approach followed in most of the deep learning systems for computer vision applications, we use reflexive padding than zero padding. Another important difference to other networks used for image restoration tasks [32], [31] is that we do not use batch normalization after convolutions. Instead, we use the parametric convolution representation that has been proposed in [33] and which is motivated by image regularization related arguments.\nIn particular, if v \u2208 RL represents the weights of a filter in a convolutional layer, these are parametrized as\nv = s (u\u2212 u\u0304) \u2016u\u2212 u\u0304\u20162 , (10)\nwhere s is a scalar trainable parameter, u \u2208 RL and u\u0304 denotes the mean value of u. In other words, we are learning zeromean valued filters whose `2-norm is equal to s.\nFurthermore, the projection layer, which is used just before the subtraction operation with the network input, corresponds to the following `2 orthogonal projection as in [33]\nPC (y) = \u03b5 y\nmax(\u2016y\u20162 , \u03b5) , (11)\nwhere \u03b5 = e\u03b3\u03c3 \u221a N \u2212 1, N is the total number of pixels in the image (including the color channels), \u03c3 is the standard deviation of the noise distorting the input, and \u03b3 is a scalar trainable parameter. As we mentioned earlier, the goal of this layer is to normalize the noise realization estimate so that it has the desired variance before it is subtracted from the network input."}, {"heading": "V. DEMOSAICKING NETWORK ARCHITECTURE", "text": "The overall architecture of our approach is based upon the MM framework, presented in Section III, and the proposed denoising network. As discussed, the MM is an iterative\nFig. 2: A graphical representation of the proposed iterative neural network. We have omitted the extrapolation steps for clarity.\nalgorithm Eq. (6) where the minimization of the majorizer in Eq. (9) can be interpreted as a denoising problem. One way to design the demosaicking approach would be to unroll the MM algorithm as K discrete steps and then for each step use a different denoising network to retrieve the solution of Eq. (9). However, this approach can have two distinct drawbacks which will hinder its performance. The first one is that the usage of a different denoising neural network for each step like in [31], demands a high overall number of parameters, which is equal to K times the parameters of the employed denoiser, making the demosaicking network impractical for any real applications. Simultaneously, the high overall number of network parameters would require a significantly higher number of training data and training time. To override these drawbacks, we opt to use our ResDNet denoiser, which can be applied to a wide range of noise levels, for all K steps of our demosaick network, using the same set of parameters. By sharing the parameters of our denoiser across all the K steps, the overall demosaicking approach maintains a low number of parameters and requires only a few hundred of images to train.\nThe second drawback of the MM framework as described in Section III is the slow convergence [37] that it can exhibit. Beck and Teboulle [37] introduced an accelerated version of this MM approach which combines the solutions of two consecutive steps with a certain extrapolation weight that is different for every step. In this work, we adopt a similar strategy which we describe in Algorithm 1. Furthermore, in our approach, we go one step further and instead of using the values originally suggested in [37] for the weights w \u2208 RK , we treat them as trainable parameters and learn them directly from the data. These weights are initialized\nAlgorithm 1: The proposed demosaicking network described as an iterative process. The ResDNet parameters are shared across all iterations. Input: M: CFA, y: input, K: iterations, w \u2208 RK :\nextrapolation weights, \u03c3: estimated noise, \u03b3 \u2208 RK : projection parameters\nx(0) = 0; Initialize x(1) using y; for i\u2190 1 to K do\nu = x(i) +wi(x (i) \u2212 x(i\u22121));\nx(i+1) = ResDNet((I\u2212M)u + y, \u03c3,\u03b3i); end\nwith wi = i\u22121i+2 ,\u22001 \u2264 i \u2264 K. The underlying reasoning of finetuning the extrapolation weights lies in [38] where the authors claim that some extrapolation weights may hinder the convergence, so we opt to fit the weights upon available data and derive a data-driven extrapolation suitable for our problem.\nThe convergence of our framework can be further sped up by employing a continuation strategy [39] where the main idea is to solve the problem in Eq. (9) with a large value of \u03c3 and then gradually decrease it until the target value is reached. Our approach is able to make use of the continuation strategy due to the design of our ResDNet denoiser, which accepts as additional arguments the noise variance that is fed to the learnable projection layer, and the ability to denoise images for various noise levels. In detail, we initialize the trainable parameter of the projection layer \u03b3 \u2208 RK with values spaced evenly on a log scale from \u03b3max to \u03b3min and later on the vector \u03b3 is further finetuned on the training dataset via backpropagation.\nIn summary, our overall demosaicking network is described in Algorithm 1 where the set of trainable parameters \u03b8 consists of the parameters of the ResDNet denoiser, the extrapolation weights w and the projection parameters \u03b3. All of the aforementioned parameters are initialized as described in the current section and Section IV and are trained on specific demosaick datasets.\nFinally, while our demosaick network shares a similar philosophy with methods such as RED [29], P 3 [30] and IRCNN [31], it exhibits some important and distinct differences. In particular, the strategies as mentioned above make use\nof certain optimization schemes to decompose their original problem into sub-problems that are solvable by a denoiser. For example, the authors of P 3 [30] decompose the original problem Eq. (1) relying on the Alternating Direction Method of Multipliers (ADMM) [24] and solve a linear system of equations and a denoising problem instead. The authors of RED [29] go one step further and employ a regularizer that involves an image-adaptive Laplacian, which in turn allows the use of several classical and machine-learning based denoisers to serve as sub-solvers. Both approaches are similar to ours; however, their formulation involves a tunable variable \u03bb that weights the participation of the regularizer on the overall optimization procedure. Thus, in order to obtain an accurate reconstruction in a timely manner, the user must manually tune the variable \u03bb which is tractable but not a trivial task. On the other hand, our method does not involve any tunable variables.\nFurthermore, the approaches P 3, RED and IRCNN are based upon static denoisers like Non Local Means [40], BM3D [41] and DCNN [32], meanwhile we opt to use a universal denoiser, like ResDNet, that can be further trained on any available training data. In a similar fashion, the Deep Mean-Shift Priors [42] approach employs a denoising autoencoder to approximate the gradient of the learned prior which is then used in the minimization of a range of different objectives via gradient descent with momentum. However, a distinct difference of this method with our approach is the fact that our learned regularizer is task-specific and does not depend on tunable parameters. Finally, our approach goes one step further, and we use a trainable version of an iterative optimization strategy for the task of the joint denoisingdemosaicking in the form of a feed-forward neural network."}, {"heading": "VI. NETWORK TRAINING", "text": ""}, {"heading": "A. Joint Denoising and Demosaicking", "text": "Since Eq. (9) is, as already discussed, a denoising step, we pre-train our ResDNet denoiser on the simple case where M = I; casting our problem an Additive White Gaussian(AWGN) denoising task. We found experimentally that pre-training the ResDNet vastly reduces the necessary training time because it is a proper initialization for the joint denoising and demosaicking task. In detail, the denoising network ResDNet that we use as part of our iterative approach is pre-trained on the Berkeley segmentation dataset (BSDS) [43], which consists of 500 color images. These images were split into two sets, 400 were used to form a train set, and the rest 100 formed a validation set. All the images were randomly cropped into patches of size 180\u00d7 180 pixels. The patches were perturbed with noise \u03c3 \u2208 [0, 15] and the network was optimized to minimize the Mean Square Error. We set the network depth D = 5, all weights are initialized as in He et al. [44] and the optimization is carried out using AMSGRAD [45] which is a stochastic gradient descent algorithm that adapts the learning rate per parameter. The training procedure starts with an initial learning rate equal to 10\u22122.\nThe pre-trained denoiser used in the presented iterative approach is further trained end-to-end to minimize the averaged L1 loss over a mini-batch of size d.\nL(\u03b8) = 1\nN d\u2211 i=1 \u2016yi \u2212 f(xi)\u20161 , (12)\nwhere yi \u2208 RN and xi \u2208 RN are the rasterized groundtruth and input images, while f (xi) denotes the output of our proposed network. Due to the iterative nature of our framework, the network parameters are updated using the Backpropagation Through Time (BPTT) algorithm. Specifically, using the same denoiser for every iteration in Alg. 1 means that the same set of parameters is used for every iteration and thus we have to sum the parameter changes in the K unfolded instances in order to train the network. However, if the number of total iterations K is high, then a number of prohibitive restrictions arise during training, for example, both K and mini-batch size d are upper-bounded from the GPU memory consumption. It is evident that we need to keep all intermediate results of the Alg. 1 in order to calculate the gradients which increases the memory requirements by a factor of K. Thankfully, there is a workaround to avoid such restrictions by using the Truncated Back-propagation Through Time (TBPTT) [46] algorithm instead, which we explain in detail in Section VI-B. Using this solution, we are able to use an arbitrary number of total iterations K for training and increase the batch size d with the only trade-off of being the increase in the computation time. Furthermore, the optimization is carried again via the AMSGRAD optimizer and the training starts from a learning rate of 10\u22122 which we decrease it by a factor of 10 every 100 epochs. Finally, for every noise-free experiment we set \u03b3max = 15 and \u03b3min = 0, while for every other case the respective values are \u03b3max = 2 and \u03b3min = 0."}, {"heading": "B. Training with TBPTT", "text": "As discussed, we would like to use an arbitrary amount of iterations K during training, however, this is not always\npossible because K is upper-bounded by the available GPU memory or RAM. Consequently, a higher number of iterations force us to use smaller batches casting the training of our framework slow. Therefore, to overcome this restriction we propose to train our framework with the TBPTT algorithm where the loop is unrolled into a small set of k iterations (stages) out of K and the back-propagation is performed sequentially on the unrolled stages as pictured in Fig. 3. Thankfully, TBPPT comes with no additional computational cost because an optimized implementation of TBPTT has the same computation complexity with the full BPTT. As presented in Fig. 3 we compute the loss Eq. (12) after k iterations. The calculation of multiple loss functions makes difficult the retrieval of the best reconstruction result during inference because this may occur in an earlier iteration rather than the last. To avoid this problem, we weight all intermediate loss function calculations by a factor of 0.5 and only the last calculation of the loss function remains unweighted. Our empirical training approach makes possible the retrieval of the best reconstruction at the last iteration.\nIn similar learnable iterative approaches such as those in [47], [48] the authors argued that a few iterations between 4 to 6 are enough to obtain descent reconstruction quality. However, we experimentally found that while a few number of iterations might lead to adequate results aimed mostly on applications where computational time needs to be kept relatively low, the best results can be achieved with as many as 20 iterations or even more. Indeed, as presented in Figs. 4 and 5 the Peak Signal-to-Noise Ratio (PSNR) is increasing till a certain number of iterations, and after that it stabilizes. Also, from Fig. 4 it is clear that a proper initialization of the network\u2019s input allows the use of only a few iterations in order to retrieve comparable performance. Nevertheless, our method is capable of achieving the same performance even with an improper initialization if a higher number of iterations is used,\nmaking our approach very attractive for other inverse problems where no good initialization exist such as compressed sensing. Finally, in Fig. 5 the trade-off between the number of network parameters and the iterations is demonstrated. In particular, from these results we observe that methods which involve a denoising network of smaller depth and thus fewer trainable parameters can produce meaningful results if the number of iterations is high enough, while methods that depend on deeper denoising networks require only a small number of iterations in order to match the same performance."}, {"heading": "VII. EXPERIMENTS", "text": "We perform an extensive line of experimentation on multiple datasets and CFA patterns in order to evaluate and analyze our method. Our main metric used for comparisons among different methods in all reported experiments is the PSNR."}, {"heading": "A. Demosaicking Artificial Data", "text": "At first, we compare our method against prior work on the pure demosaicking task with artificially created mosaicked data on the sRGB color space. The artificial data are created using the standard datasets McMaster [2], Kodak [1]1 and the newly created MIT dataset [15]; all of which are 8-bit sRGB data and they are re-mosaicked, so the following experiments deviate from the standard camera pipeline used in practical scenarios. Beyond this, the aforementioned dataset is known to have flaws [15] and misrepresent the statistics of natural images [49]. Due to the fact that these images are noise-free, we manually set \u03c3 = 1 as the noise standard deviation for all images and no noise estimation takes place. The whole MIT Dataset is used for training for 10 epochs, and we set K = 1 in order to speed up the training process; after that, the network is trained on a small random subset of 40.000\n1The Kodak dataset is re-sized to 512x768 following the methodology of evaluation described in [1].\nwith K = 10. In this case, the input is the mosaicked image, and no initialization takes place. The whole training procedure requires approximately four days. From the reported results in Table I we observe that our network achieves comparable performance for all different datasets with current state-ofthe-art approaches, although, it requires only a fraction of the parameters that the other systems use. In more detail, our method for the demosaick-only scenario is using 380.356, while Gharbi et al. [15] and Henz et al. [16] make use of 559.776 and 1.204.780 parameters respectively."}, {"heading": "B. Demosaicking Raw Data", "text": "As mentioned earlier, Khashabi et al. [11] proposed that the evaluation of demosaicking and denoising should occur on raw RGB data because this testing pipeline is closely related to real digital imaging applications. MSR dataset contains exclusively linear data encoded in the standard imaging 16-bit representation. The dataset contains 200 images for training, which we augment with vertical and horizontal flips, 100 for validation purposes and a test set of 200 images. The same 200 training images are provided with noise perturbations using the affine noise model [17] with unknown values for the hyperparameters of the noise. The lack of these hyperparameters renders difficult the production of training data that follow the same noise statistics. This reason, forced Gharbi et al. [15] to use the simplistic approach of Gaussian noise for training data creation which diverges greatly from practical applications and this fact is reflected from the inferior performance that their system achieves in the noisy case (38.6 dB). While we made the same simplistic assumption in Section III, in order to design the network architecture, our network after being trained on more realistic noise conditions, is capable of denoising successfully even the data dependent part of the affine noise models, as it can be seen in Fig. 6. We estimate \u03c3 for each raw image using the median absolute deviation of the wavelet detail coefficients as described in [52] and provide it to the network as additional input.\nSurprisingly, as show in Table II our method is capable to achieve slightly better performance to Gharbi et al. in the noise-free scenario using only 200 training images and surpass previous approaches in the noisy scenario by a large margin of 1.3 dB if we employ K = 20 iterations and 0.4 dB if we set K = 2. This fact clearly demonstrates the capabilities of our method to generalize better even when trained on\nsmall datasets and the ability to trade off performance for computing time and vice versa. Apart from the quantitative results in Fig. 7, we showcase and compare the results of our method and other well known approaches on real RAW images acquired from the web. Clearly, our method leads to better and more visually pleasing results, since it is able to demosaick the RAW image restoring the fine details while effectively suppressing noise. The training time for MSR dataset is linear to the number of iterations therefore for K = 2 training takes approximately 1 hour and for K = 20 nearly 11 hours are required."}, {"heading": "C. Demosaicking Non-Bayer CFA Data", "text": "Finally, we explore the applicability of our approach to other Non-Bayer CFA, namely the Fuji-XTrans used by all modern Fuji digital cameras. Obviously, methods capable of demosaicking images from any camera sensor are preferred for practical applications. The images contained on MSR are also provided with the Fuji Xtrans CFA but only on the noise-free case. Using this available data, we trained our method without initialization, and our results are provided in Table. III. Clearly, our method is capable of outperforming the state of the art by a 0.7 dB margin for K = 20 while being trained with only 200 images with flipping augmentations. At the same time, our network is capable of outperforming previous approaches even when employing only K = 8 iterations and using as input the mosaicked image without any proper initialization. The lack of proper initialization constrains the meaningful minimum number of iterations to be at least K = 8 since fewer iterations are not enough to achieve satisfactory performance."}, {"heading": "D. Running Time", "text": "To evaluate the time complexity of the most recent stateof-the art methods, we estimated their execution time for an 1 Mpixel image using the source code that has been made publicly available by the respective authors. The benchmarks were run on a machine with a single NVIDIA GTX 1080 Ti GPU, an Intel i7-6850K CPU and 32 GB of RAM. Our method\nis capable of demosaicking at 2\u00d7 faster than Gharbi [15] and 22\u00d7 than Henz [16], when the number of total iterations is kept small. However, as we increase the number of iterations the computation cost increases almost linearly. For example, as presented in Fig. 5 doubling the number of iterations from 10 to 20, while it yields a quantitative improvement of 0.2 dB in the reconstruction quality, it also requires twice the execution time. Therefore in practice, there is a trade-off between fast execution time and reconstruction quality, which needs to be taken into account by the users."}, {"heading": "VIII. DISCUSSION", "text": "There is a close connection between our proposed Algorithm 1 and some instances of the proximal gradient descent algorithm (PGD), such as the Iterative Shrinkage Thresholding Algorithm (ISTA) [53] and its accelerated version (FISTA)[37]. In fact, the denoising step (9) of our approach is equivalent to computing the proximal operator. However, between the two algorithms above and our approach, there are two differences that we would like to highlight. Firstly, a distinctive difference between our CNN based approach and the proximal operator is the fact that our denoiser can only approximate the solution, so in a sense, it is an inexact proximal solution. Thus our proposed algorithm acts as an Inexact Proximal Gradient Descent (IPGD)[54]. Second, ISTA and FISTA require the exact form of the employed regularizer, such as Total Variation [55] or Hessian Schatten-norm regularization [56], [28]. In contrast, our method implicitly learns the regularizer from available data as a part of the proximal approximation. Of course, there is no straightforward way to derive the type of regularization that our deep learning denoiser has learned during training. However, this does not introduce any problems since there is no need to know either the regularizer nor the exact proximal solution. The reason for that is that as it is shown in [54], even in the non-convex cases like ours, an inexact proximal solution can converge in the same convergence rate as the original PGD algorithms, provided that certain assumptions apply."}, {"heading": "IX. CONCLUSION", "text": "In this work, we presented a novel deep learning system that produces high-quality images from raw sensor data. Our demosaick network yields superior results both quantitative and qualitative compared to the current state-of-the-art solutions. Meanwhile, our approach is able to generalize well even when trained on small datasets and the number of our network parameters is kept low compared to other competing networks. Finally, we introduced an efficient way to train iterative networks that involve an arbitrary number of iterations. We hope that our training strategy, which is not specific to our network architecture, will pave the way to successful training of learning-based iterative approaches that target other image restoration tasks."}], "title": "Iterative Joint Image Demosaicking and Denoising using a Residual Denoising Network", "year": 2019}