{
  "abstractText": "Nonlinear methods such as Deep Neural Networks (DNNs) are the gold standard for various challenging machine learning problems, e.g., image classification, natural language processing or human action recognition. Although these methods perform impressively well, they have a significant disadvantage, the lack of transparency, limiting the interpretability of the solution and thus the scope of application in practice. Especially DNNs act as black boxes due to their multilayer nonlinear structure. In this paper we introduce a novel methodology for interpreting generic multilayer neural networks by decomposing the network classification decision into contributions of its input elements. Although our focus is on image classification, the method is applicable to a broad set of input data, learning tasks and network architectures. Our method is based on deep Taylor decomposition and efficiently utilizes the structure of the network by backpropagating the explanations from the output to the input layer. We evaluate the proposed method empirically on the MNIST and ILSVRC data sets.",
  "authors": [
    {
      "affiliations": [],
      "name": "Gr\u00e9goire Montavon"
    },
    {
      "affiliations": [],
      "name": "Sebastian Bach"
    },
    {
      "affiliations": [],
      "name": "Alexander Binder"
    },
    {
      "affiliations": [],
      "name": "Wojciech Samek"
    },
    {
      "affiliations": [],
      "name": "Klaus-Robert M\u00fcller"
    }
  ],
  "id": "SP:4cba54578361892d34672b9bc24e73478db2b307",
  "references": [
    {
      "authors": [
        "S. Bach",
        "A. Binder",
        "G. Montavon",
        "F. Klauschen",
        "K.-R. M\u00fcller",
        "W. Samek"
      ],
      "title": "On pixel-wise explanations for non-linear classifier decisions by layer-wise relevance propagation,",
      "venue": "PLoS ONE,",
      "year": 2015
    }
  ],
  "sections": [
    {
      "text": "I. INTRODUCTION\nNonlinear models have been used since the advent of machine learning (ML) methods and are integral part of many popular algorithms. They include, for example, graphical models [1], kernels [2], [3], Gaussian processes [4], neural networks [5], [6], [7], boosting [8], or random forests [9]. Recently, a particular class of nonlinear methods, Deep Neural Networks (DNNs), revolutionized the field of automated image classification by demonstrating impressive performance on large benchmark data sets [10], [11], [12]. Deep networks have also been applied successfully to other research fields such as natural language processing [13], [14], human action recognition [15], [16], or physics [17], [18]. Although these models are highly successful in terms of performance, they have a drawback of acting like a black box in the sense that it is not clear how and why they arrive at a particular classification\nThis work was supported by the Brain Korea 21 Plus Program through the National Research Foundation of Korea funded by the Ministry of Education. This work was also supported by the grant DFG (MU 987/17- 1) and by the German Ministry for Education and Research as Berlin Big Data Center BBDC (01IS14013A). This publication only reflects the authors views. Funding agencies are not liable for any use that may be made of the information contained herein. Asterisks indicate corresponding author. \u2217G. Montavon is with the Berlin Institute of Technology (TU Berlin), 10587 Berlin, Germany. (e-mail: gregoire.montavon@tu-berlin.de) S. Bach is with Fraunhofer Heinrich Hertz Institute, 10587 Berlin, Germany. (e-mail: sebastian.bach@hhi.fraunhofer.de) A. Binder is with the Singapore University of Technology and Design, 487372, Singapore. (e-mail: alexander binder@sutd.edu.sg) \u2217W. Samek is with Fraunhofer Heinrich Hertz Institute, 10587 Berlin, Germany. (e-mail: wojciech.samek@hhi.fraunhofer.de) \u2217K.-R. Mu\u0308ller is with the Berlin Institute of Technology (TU Berlin), 10587 Berlin, Germany, and also with the Department of Brain and Cognitive Engineering, Korea University, Seoul 136-713, Korea (e-mail: klausrobert.mueller@tu-berlin.de)\ndecision. This lack of transparency is a serious disadvantage as it prevents a human expert from being able to verify, interpret, and understand the reasoning of the system.\nAn interpretable classifier explains its nonlinear classification decision in terms of the inputs. For instance, in image classification problems, the classifier should not only indicate whether an image of interest belongs to a certain category or not, but also explain what structures (e.g. pixels in the image) were the basis for its decision (cf. Figure 1). This additional information helps to better assess the quality of a particular prediction, or to verify the overall reasoning ability of the trained classifier. Also, information about which pixels are relevant in a particular image, could be used for determining which region of the image should be the object of further analysis. Linear models readily provide explanations in terms of input variables (see for example [19], [20]). However, because of the limited expressive power of these models, they perform poorly on complex tasks such as image recognition. Extending linear analysis techniques to more realistic nonlinear models such as deep neural networks, is therefore of high practical relevance.\nRecently, a significant amount of work has been dedicated to make the deep neural network more transparent to its user, in particular, improving the overall interpretability of the learned model, or explaining individual predictions. For example, Zeiler et al. [21] have proposed a network propagation technique to identify patterns in the input data that are linked to a particular neuron activation or a classification decision. Subsequently, Bach et al. [22] have introduced the concept of pixel-wise decomposition of a classification decision, and how such decomposition can be achieved either by Taylor decomposition, or by a relevance propagation algorithm. Specifically, the authors distinguish between (1) functional approaches that view the neural network as a function and disregard its topology, and (2) message passing approaches, where the decomposition stems from a simple propagation rule applied uniformly to all neurons of the deep network.\nThe main goal of this paper is to reconcile the functional and rule-based approaches for obtaining these decompositions, in a similar way to the error backpropagation algorithm [23] that also has a functional and a message passing interpretation. We call the resulting framework deep Taylor decomposition. This new technique seeks to replace the analytically intractable standard Taylor decomposition problem by a multitude of simpler analytically tractable Taylor decompositions\u2014one per neuron. The proposed method results in a relevance redistribution process like the one illustrated in Figure 1 for a neural network trained to detect the digit \u201c0\u201d in an image, in presence\nar X\niv :1\n51 2.\n02 47\n9v 1\n[ cs\n.L G\n] 8\nD ec\n2 01\n5\n2 Classification Explanation Trained Network Our Method\n=\nFig. 1. Overview of our method for explaining a nonlinear classification decision. The method produces a pixel-wise heatmap explaining why a neural network classifier has come up with a particular decision (here, detecting the digit \u201c0\u201d in an input image composed of two digits). The heatmap is the result of a deep Taylor decomposition of the neural network function. Note that for the purpose of the visualization, the left and right side of the figure are mirrored.\nof another distracting digit. The classification decision is first decomposed in terms of contributions R1, R2, R3 of respective hidden neurons x1, x2, x3, and then, the contribution of each hidden neuron is independently redistributed onto the pixels, leading to a relevance map (or heatmap) in the pixel space, that explains the classification \u201c0\u201d.\nA main result of this work is the observation that application of deep Taylor decomposition to neural networks used for image classification, yields rules that are similar to those proposed by [22] (the \u03b1\u03b2-rule and the -rule), but with specific instantiations of their hyperparameters, previously set heuristically. Because of the theoretical focus of this paper, we do not perform a broader empirical comparison with other recently proposed methods such as [24] or [21]. However, we refer to [25] for such a comparison.\nThe paper is organized as follows: Section II introduces the general idea of decomposition of a classification score in terms of input variables, and how this decomposition arises from Taylor decomposition or deep Taylor decomposition of a classification function. Section III applies the proposed deep Taylor decomposition method to a simple detection-pooling neural network. Section IV extends the method to deeper networks, by introducing the concept of relevance model and describing how it can be applied to large GPU-trained neural networks without retraining. Several experiments on MNIST and ILSVRC data are provided to illustrate the methods described here. Section V concludes.\nRelated Work\nThere has been a significant body of work focusing on the analysis and understanding of nonlinear classifiers such as kernel machines [26], [27], [28], [29], neural networks [30], [31], [32], [33], or a broader class of nonlinear models [34], [22]. In particular, some recent analyses have focused on the understanding of state-of-the-art GPU-trained convolutional neural networks for image classification [35], [24], [21], offering new insights on these highly complex models.\nSome methods seek to provide a general understanding of the trained model, by measuring important characteristics of it, such as the noise and relevant dimensionality of its feature space(s) [26], [29], [33], its invariance to certain transformations of the data [32] or the role of particular neurons [36].\nIn this paper, we focus instead on the interpretation of the prediction of individual data points, for which portions of the trained model may either be relevant or not relevant.\nTechnically, the methods proposed in [27], [28] do not explain the decision of a classifier but rather perform sensitivity analysis by computing the gradient of the decision function. This results in an analysis of variations of that function, without however seeking to provide a full explanation why a certain data point has been predicted in a certain way. Specifically, the gradient of a function does not contain information on the saliency of a feature in the data to which the function is applied. Simonyan et al. [24] incorporate saliency information by multiplying the gradient by the actual data point.\nThe method proposed by Zeiler and Fergus [21] was designed to visualize and understand the features of a convolutional neural network with max-pooling and rectified linear units. The method performs a backpropagation pass on the network, where a set of rules is applied uniformly to all layers of the network, resulting in an assignment of values onto pixels. The method however does not aim to attribute a defined meaning to the assigned pixel values, except for the fact that they should form a visually interpretable pattern. [22] proposed a layer-wise propagation method where the backpropagated signal is interpreted as relevance, and obeys a conservation property. The proposed propagation rules were designed according to this property, and were shown quantitatively to better support the classification decision [25]. However, the practical choice of propagation rules among all possible ones was mainly heuristic and lacked a strong theoretical justification.\nA theoretical foundation to the problem of relevance assignment for a classification decision, can be found in the Taylor decomposition of a nonlinear function. The approach was described by Bazen and Joutard [34] as a nonlinear generalization of the Oaxaca method in econometrics [20]. The idea was subsequently introduced in the context of image analysis [22], [24] for the purpose of explaining machine learning classifiers. Our paper extends the standard Taylor decomposition in a way that takes advantage of the deep structure of neural networks, and connects it to rule-based propagation methods, such as [22].\nAs an alternative to propagation methods, spatial response maps [37] build heatmaps by looking at the neural network output while sliding the neural network in the pixel space. Attention models based on neural networks can be trained to provide dynamic relevance assignment, for example, for the purpose of classifying an image from only a few glimpses of it [38]. They can also visualize what part of an image is relevant at a given time in some temporal context [39]. However, they usually require specific models that are significantly more complex to design and train."
    },
    {
      "heading": "II. PIXEL-WISE DECOMPOSITION OF A FUNCTION",
      "text": "In this section, we will describe the general concept of explaining a neural network decision by redistributing the function value (i.e. neural network output) onto the input variables in an amount that matches the respective contributions of\n3 these input variables to the function value. After enumerating a certain number of desirable properties for the input-wise relevance decomposition, we will explain in a second step how the Taylor decomposition technique, and its extension, deep Taylor decomposition, can be applied to this problem. For the sake of interpretability\u2014and because all our subsequent empirical evaluations focus on the problem of image recognition,\u2014we will call the input variables \u201cpixels\u201d, and use the letter p for indexing them. Also, we will employ the term \u201cheatmap\u201d to designate the set of redistributed relevances onto pixels. However, despite the image-related terminology, the method is applicable more broadly to other input domains such as abstract vector spaces, time series, or more generally any type of input domain whose elements can be processed by a neural network.\nLet us consider a positive-valued function f : Rd \u2192 R+. In the context of image classification, the input x \u2208 Rd of this function can be an image. The image can be decomposed as a set of pixel values x = {xp} where p denotes a particular pixel. The function f(x) quantifies the presence (or amount) of a certain type of object(s) in the image. This quantity can be for example a probability, or the number of occurrences of the object. A function value f(x) = 0 indicates the absence of such object(s) in the image. On the other hand, a function value f(x) > 0 expresses the presence of the object(s) with a certain probability or in a certain amount.\nWe would like to associate to each pixel p in the image a relevance score Rp(x), that indicates for an image x to what extent the pixel p contributes to explaining the classification decision f(x). The relevance of each pixel can be stored in a heatmap denoted by R(x) = {Rp(x)} of same dimensions as the image x. The heatmap can therefore also be visualized as an image. In practice, we would like the heatmapping procedure to satisfy certain properties that we define below.\nDefinition 1. A heatmapping R(x) is conservative if the sum of assigned relevances in the pixel space corresponds to the total relevance detected by the model, that is\n\u2200x : f(x) = \u2211\np\nRp(x).\nDefinition 2. A heatmapping R(x) is positive if all values forming the heatmap are greater or equal to zero, that is:\n\u2200x, p : Rp(x) \u2265 0 The first property was proposed by [22] and ensures that the total redistributed relevance corresponds to the extent to which the object in the input image is detected by the function f(x). The second property forces the heatmapping to assume that the model is devoid of contradictory evidence (i.e. no pixels can be in contradiction with the presence or absence of the detected object in the image). These two properties of a heatmap can be combined into the notion of consistency:\nDefinition 3. A heatmapping R(x) is consistent if it is conservative and positive. That is, it is consistent if it complies with Definitions 1 and 2.\nIn particular, a consistent heatmap is forced to satisfy (f(x) = 0) \u21d2 (R(x) = 0). That is, in absence of an\nobject to detect, the relevance is forced to be zero everywhere in the image (i.e. empty heatmap), and not simply to have negative and positive relevance in same amount. We will use Definition 3 as a formal tool for assessing the correctness of the heatmapping techniques proposed in this paper.\nIt was noted by [22] that there may be multiple heatmapping techniques that satisfy a particular definition. For example, we can consider a heatmapping specification that assigns for all images the relevance uniformly onto the pixel grid:\n\u2200p : Rp(x) = 1\nd \u00b7 f(x), (1)\nwhere d is the number of input dimensions. Alternately, we can consider another heatmapping specification where all relevance is assigned to the first pixel in the image:\nRp(x) = { f(x) if p = 1st pixel 0 else. (2)\nBoth (1) and (2) are consistent in the sense of Definition 3, however they lead to different relevance assignments. In practice, it is not possible to specify explicitly all properties that a heatmapping technique should satisfy in order to be meaningful. Instead, it can be given implicitly by the choice of a particular algorithm (e.g. derived from a particular mathematical model), subject to the constraint that it complies with the definitions above."
    },
    {
      "heading": "A. Taylor Decomposition",
      "text": "We present a heatmapping method for explaining the classification f(x) of a data point x, that is based on the Taylor expansion of the function f at some well-chosen root point x\u0303, where f(x\u0303) = 0. The first-order Taylor expansion of the function is given as\nf(x) = f(x\u0303) +\n( \u2202f\n\u2202x \u2223\u2223\u2223 x=x\u0303 )> \u00b7 (x\u2212 x\u0303) + \u03b5\n= 0 + \u2211\np\n\u2202f\n\u2202xp\n\u2223\u2223\u2223 x=x\u0303 \u00b7 (xp \u2212 x\u0303p) \ufe38 \ufe37\ufe37 \ufe38 Rp(x) + \u03b5, (3)\nwhere the sum \u2211\np runs over all pixels in the image, and {x\u0303p} are the pixel values of the root point x\u0303. We identify the summed elements as the relevances Rp(x) assigned to pixels in the image. The term \u03b5 denotes second-order and higher-order terms. Most of the terms in the higher-order expansion involve several pixels at the same time and are therefore more difficult to redistribute. Thus, for simplicity, we will consider only the first-order terms for heatmapping. The heatmap (composed of all identified pixel-wise relevances) can be written as the element-wise product \u201c \u201d between the gradient of the function \u2202f/\u2202x at the root point x\u0303 and the difference between the image and the root (x\u2212 x\u0303):\nR(x) = \u2202f\n\u2202x \u2223\u2223\u2223 x=x\u0303 (x\u2212 x\u0303).\nFigure 2 illustrates the construction of a heatmap in a cartoon example, where a hypothetical function f detects the presence of an object of class \u201cbuilding\u201d in an image x. In this example,\n4 Input Heatmap Gradient Root point\nDifference\nFig. 2. Cartoon showing the construction of a Taylor-based heatmap from an image x and a hypothetical function f detecting the presence of objects of class \u201cbuilding\u201d in the image. In the heatmap, positive values are shown in red, and negative values are shown in blue.\nthe root point x\u0303 is the same image as x where the building has been blurred. The root point x\u0303 plays the role of a neutral data point that is similar to the actual data point x but lacks the particular object in the image that causes f(x) to be positive. The difference between the image and the root point (x \u2212 x\u0303) is therefore an image with only the object \u201cbuilding\u201d. The gradient \u2202f/\u2202x|x=x\u0303 measures the sensitivity of the class \u201cbuilding\u201d to each pixel when the classifier f is evaluated at the root point x\u0303. Finally, the sensitivities are multiplied element-wise with the difference (x\u2212x\u0303), producing a heatmap that identifies the most contributing pixels for the object \u201cbuilding\u201d. Strictly speaking, for images with multiple color channels (e.g. RGB), the Taylor decomposition will be performed in terms of pixels and color channels, thus forming multiple heatmaps (one per color channel). Since we are here interested in pixel contributions and not color contributions, we sum the relevance over all color channels, and obtain as a result a single heatmap.\nFor a given classifier f(x), the Taylor decomposition approach described above has one free variable: the choice of the root point x\u0303 at which the Taylor expansion is performed. The example of Figure 2 has provided some intuition on what are the properties of a good root point. In particular, a good root point should selectively remove information from some pixels (here, pixels corresponding to the building at the center of the image), while keeping the surroundings unchanged. This allows in principle for the Taylor decomposition to produce a complete explanation of the detected object which is also insensitive to the surrounding trees and sky.\nMore formally, a good root point is one that removes the object (e.g. as detected by the function f(x), but that minimally deviates from the original point x. In mathematical terms, it is a point x\u0303 with f(x\u0303) = 0 that lies in the vicinity of x under some distance metric, for example the nearest root. If x, x\u0303 \u2208 Rd, one can show that for a continuously differentiable function f the gradient at the nearest root always points to the same direction as the difference x \u2212 x\u0303, and their element-wise product is always positive, thus satisfying Definition 2. Relevance conservation in the sense of Definition 1 is however not satisfied for general functions f due to the possible presence of non-zero higher-order terms in \u03b5. The nearest root x\u0303 can be obtained as a solution of an optimization\nproblem [35], by minimizing the objective\nmin \u03be \u2016\u03be \u2212 x\u20162 subject to f(\u03be) = 0 and \u03be \u2208 X ,\nwhere X is the input domain. The nearest root x\u0303 must therefore be obtained in the general case by an iterative minimization procedure. It is time consuming when the function f(x) is expensive to evaluate or differentiate. Furthermore, it is not necessarily solvable due to the possible non-convexity of the minimization problem.\nWe introduce in the next sections two variants of Taylor decomposition that seek to avoid the high computational requirement, and to produce better heatmaps. The first one called sensitivity analysis makes use of a single gradient evaluation of the function at the data point. The second one called deep Taylor decomposition exploits the structure of the function f(x) when the latter is a deep neural network in order to redistribute relevance onto pixels using a single forwardbackward pass on the network."
    },
    {
      "heading": "B. Sensitivity Analysis",
      "text": "A simple method to assign relevance onto pixels is to set it proportional to the squared derivatives of the classifier [40]:\nR(x) \u221d (\u2202f \u2202x )2 ,\nwhere the power applies element-wise. This redistribution can be viewed as a special instance of Taylor decomposition where one expands the function at a point \u03be \u2208 Rd, which is taken at an infinitesimally small distance from the actual point x, in the direction of maximum descent of f (i.e. \u03be = x\u2212\u03b4 \u00b7\u2202f/\u2202x with \u03b4 small). Assuming that the function is locally linear, and therefore, the gradient is locally constant, we get\nf(x) = f(\u03be) + (\u2202f \u2202x \u2223\u2223\u2223 x=\u03be )> \u00b7 ( x\u2212 ( x\u2212 \u03b4 \u2202f \u2202x )) + 0\n= f(\u03be) + \u03b4 (\u2202f \u2202x )> \u2202f \u2202x + 0 = f(\u03be) + \u2211\np\n\u03b4 ( \u2202f \u2202xp )2 \ufe38 \ufe37\ufe37 \ufe38 Rp +0,\nwhere the second-order terms are zero because of the local linearity. The resulting heatmap is positive, but not conservative since almost all relevance is absorbed by the zero-order term f(\u03be), which is not redistributed. Sensitivity analysis only measures a local effect and does provide a full explanation of a classification decision. In that case, only relative contributions between different values of Rp are meaningful."
    },
    {
      "heading": "C. Deep Taylor Decomposition",
      "text": "A rich class of functions f(x) that can be trained to map input data to classes is the deep neural network (DNN). A deep neural network is composed of multiple layers of representation, where each layer is composed of a set of neurons. The neural network is trained by adapting its set of parameters at each layer, so that the overall prediction error is minimized. As a result of training a deep network, a particular\nstructure or factorization of the learned function emerges [41]. For example, each neuron in the first layer may react to a particular pixel activation pattern that is localized in the pixel space. The resulting neuron activations may then be used in higher layers to compose more complex nonlinearities [42] that involve a larger number of pixels.\nThe deep Taylor decomposition method presented here is inspired by the divide-and-conquer paradigm, and exploits the property that the function learned by a deep network is structurally decomposed into a set of simpler subfunctions that relate quantities in adjacent layers. Instead of considering the whole neural network function f , we consider the mapping of a set of neurons {xi} at a given layer to the relevance Rj assigned to a neuron xj in the next layer. Assuming that these two objects are functionally related by some function Rj({xi}), we would like to apply Taylor decomposition on this local function in order to redistribute relevance Rj onto lower-layer relevances {Ri}. For these simpler subfunctions, Taylor decomposition should be made easier, in particular, root points should be easier to find. Running this redistribution procedure in a backward pass leads eventually to the pixelwise relevances {Rp} that form the heatmap.\nFigure 3 illustrates in details the procedure of layer-wise relevance propagation on a cartoon example where an image of a cat is presented to a hypothetical deep network. If the neural network has been trained to detect images with an object \u201ccat\u201d, the hidden layers have likely implemented a factorization of the pixels space, where neurons are modeling various features at various locations. In such factored network, relevance redistribution is easier in the top layer where it has to be decided which neurons, and not pixels, are representing the object \u201ccat\u201d. It is also easier in the lower layer where the relevance has already been redistributed by the higher layers to the neurons corresponding to the location of the object \u201ccat\u201d.\nAssuming the existence of a function that maps neuron activities {xi} to the upper-layer relevance Rj , and of a neighboring root point {x\u0303i} such that Rj({x\u0303i}) = 0, we can\nthen write the Taylor decomposition of \u2211\nj Rj at {xi} as \u2211\nj\nRj =\n( \u2202 (\u2211 j Rj )\n\u2202{xi} \u2223\u2223\u2223 {x\u0303i} )> \u00b7 ({xi} \u2212 {x\u0303i}) + \u03b5\n= \u2211\ni\n\u2211\nj\n\u2202Rj \u2202xi \u2223\u2223\u2223 {x\u0303i} \u00b7 (xi \u2212 x\u0303i) \ufe38 \ufe37\ufe37 \ufe38 Ri +\u03b5, (4)\nthat redistributes relevance from one layer to the layer below, where \u03b5 denotes the Taylor residual, where \u2223\u2223 {x\u0303i} indicates that the derivative has been evaluated at the root point {x\u0303i}, where \u2211 j runs over neurons at the given layer, and where \u2211 i runs over neurons in the lower layer. Equation 4 allows us to identify the relevance of individual neurons in the lower layer in order to apply the same Taylor decomposition technique one layer below.\nIf each local Taylor decomposition in the network is conservative in the sense of Definition 1, then, the chain of equalities Rf = . . . = \u2211 j Rj = \u2211 iRi = . . . = \u2211 pRp should hold. This chain of equalities is referred by [22] as layerwise relevance conservation. Similarly, if Definition 2 holds for each local Taylor decomposition, the positivity of relevance scores at each layer Rf , . . . , {Rj}, {Ri}, . . . , {Rp} \u2265 0 is also ensured. Finally, if all Taylor decompositions of local subfunctions are consistent in the sense of Definition 3, then, the whole deep Taylor decomposition is also consistent in the same sense."
    },
    {
      "heading": "III. APPLICATION TO ONE-LAYER NETWORKS",
      "text": "As a starting point for better understanding deep Taylor decomposition, in particular, how it leads to practical rules for relevance propagation, we work through a simple example, with advantageous analytical properties. We consider a detection-pooling network made of one layer of nonlinearity. The network is defined as\nxj = max ( 0, \u2211 ixiwij + bj )\n(5) xk = \u2211 jxj (6)\nwhere {xi} is a d-dimensional input, {xj} is a detection layer, xk is the output, and \u03b8 = {wij , bj} are the weight and bias parameters of the network. The one-layer network is depicted\n6 detection sumpooling outputinput one-layer neural network\nFig. 4. Detection-pooling network that implements Equations 5 and 6: The first layer detects features in the input space, the second layer pools the detected features into an output score.\nin Figure 4. The mapping {xi} \u2192 xk defines a function g \u2208 G, where G denotes the set of functions representable by this onelayer network. We will set an additional constraint on biases, where we force bj \u2264 0 for all j. Imposing this constraint guarantees the existence of a root point {x\u0303i} of the function g (located at the origin), and thus also ensures the applicability of standard Taylor decomposition, for which a root point is needed.\nWe now perform the deep Taylor decomposition of this function. We start by equating the predicted output to the amount of total relevance that must be backpropagated. That is, we define Rk = xk. The relevance for the top layer can now be expressed in terms of lower-layer neurons as:\nRk = \u2211 jxj (7)\nHaving established the mapping between {xj} and Rk, we would like to redistribute Rk onto neurons {xj}. Using Taylor decomposition (Equation 3), redistributed relevances Rj can be written as:\nRj = \u2202Rk \u2202xj \u2223\u2223\u2223 {x\u0303j} \u00b7 (xj \u2212 x\u0303j). (8)\nWe still need to choose a root point {x\u0303j}. The list of all root points of this function is given by the plane equation \u2211 j x\u0303j = 0. However, for the root to play its role of reference point, it should be admissible. Here, because of the application of the function max(0, \u00b7) in the preceding layer, the root point must be positive. The only point that is both a root ( \u2211 j x\u0303j = 0) and admissible (\u2200j : x\u0303j \u2265 0) is {x\u0303j} = 0. Choosing this root point in Equation 8, and observing that the derivative \u2202Rk\u2202xj = 1, we obtain the first rule for relevance redistribution:\nRj = xj (9)\nIn other words, the relevance must be redistributed on the neurons of the detection layer in same proportion as their activation value. Trivially, we can also verify that the relevance is conserved during the redistribution process (\n\u2211 j Rj =\u2211\nj xj = Rk) and positive (Rj = xj \u2265 0). Let us now express the relevance Rj as a function of the input neurons {xi}. Because Rj = xj as a result of applying the propagation rule of Equation 9, we can write\nRj = max ( 0, \u2211 ixiwij + bj ) , (10)\nthat establishes a mapping between {xi} and Rj . To obtain redistributed relevances {Ri}, we will apply Taylor decomposition again on this new function. The identification of the\nredistributed total relevance \u2211\nj Rj onto the preceding layer was identified in Equation 4 as:\nRi = \u2211\nj\n\u2202Rj \u2202xi \u2223\u2223\u2223 {x\u0303i}(j) \u00b7 (xi \u2212 x\u0303(j)i ). (11)\nRelevances {Ri} can therefore be obtained by performing as many Taylor decompositions as there are neurons in the hidden layer. Note that a superscript (j) has been added to the root point {x\u0303i} in order to emphasize that a different root point is chosen for decomposing each relevance Rj . We will introduce below various methods for choosing a root {x\u0303i}(j) that consider the diversity of possible input domains X \u2286 Rd to which the data belongs. Each choice of input domain and associated method to find a root will lead to a different rule for propagating relevance {Rj} to {Ri}.\nA. Unconstrained Input Space and the w2-Rule\nWe first consider the simplest case where any real-valued input is admissible (X = Rd). In that case, we can always choose the root point {x\u0303i}(j) that is nearest in the Euclidean sense to the actual data point {xi}. When Rj > 0, the nearest root of Rj as defined in Equation 10 is the intersection of the plane equation \u2211 i x\u0303 (j) i wij+bj = 0, and the line of maximum descent {x\u0303i}(j) = {xi} + t \u00b7 wj , where wj is the vector of weight parameters that connects the input to neuron xj and t \u2208 R. The intersection of these two subspaces is the nearest root point. It is given by {x\u0303i}(j) = {xi\u2212 wij\u2211\ni w 2 ij ( \u2211\ni xiwij + bj)}. Injecting this root into Equation 11, the relevance redistributed onto neuron i becomes:\nRi = \u2211\nj\nw2ij\u2211 i\u2032 w 2 i\u2032j Rj (12)\nThe propagation rule consists of redistributing relevance according to the square magnitude of the weights, and pooling relevance across all neurons j. This rule is also valid for Rj = 0, where the actual point {xi} is already a root, and for which no relevance needs to be propagated.\nProposition 1. For all g \u2208 G, the deep Taylor decomposition with the w2-rule is consistent in the sense of Definition 3.\nThe w2-rule resembles the rule by [30], [40] for determining the importance of input variables in neural networks, where absolute values of wij are used in place of squared values. It is important to note that the decomposition that we propose here is modulated by the upper layer data-dependent Rjs, which leads to an individual explanation for each data point.\nB. Constrained Input Space and the z-Rules\nWhen the input domain is restricted to a subset X \u2282 Rd, the nearest root of Rj in the Euclidean sense might fall outside of X . In the general case, finding the nearest root in this constrained input space can be difficult. An alternative is to further restrict the search domain to a subset of X where nearest root search becomes feasible again.\nWe first study the case X = Rd+, which arises, for example in feature spaces that follow the application of rectified linear\n7 units. In that case, we restrict the search domain to the segment ({xi1wij<0}, {xi}) \u2282 Rd+, that we know contains at least one root at its first extremity. Injecting the nearest root on that segment into Equation 11, we obtain the relevance propagation rule:\nRi = \u2211\nj\nz+ij\u2211 i\u2032 z + i\u2032j Rj\n(called z+-rule), where z+ij = xiw + ij , and where w + ij denotes the positive part of wij . This rule corresponds for positive input spaces to the \u03b1\u03b2-rule formerly proposed by [22] with \u03b1 = 1 and \u03b2 = 0. The z+-rule will be used in Section IV to propagate relevances in higher layers of a neural network where neuron activations are positive.\nProposition 2. For all g \u2208 G and data points {xi} \u2208 Rd+, the deep Taylor decomposition with the z+-rule is consistent in the sense of Definition 3.\nFor image classification tasks, pixel spaces are typically subjects to box-constraints, where an image has to be in the domain B = {{xi} : \u2200di=1 li \u2264 xi \u2264 hi}, where li \u2264 0 and hi \u2265 0 are the smallest and largest admissible pixel values for each dimension. In that new constrained setting, we can restrict the search for a root on the segment ({li1wij>0+hi1wij<0}, {xi}) \u2282 B, where we know that there is at least one root at its first extremity. Injecting the nearest root on that segment into Equation 11, we obtain relevance propagation rule:\nRi = \u2211\nj\nzij \u2212 liw+ij \u2212 hiw\u2212ij\u2211 i\u2032 zi\u2032j \u2212 liw+i\u2032j \u2212 hiw\u2212i\u2032j Rj\n(called zB-rule), where zij = xiwij , and where we note the presence of data-independent additive terms in the numerator and denominator. The idea of using an additive term in the denominator was formerly proposed by [22] and called - stabilized rule. However, the objective of [22] was to make the denominator non-zero to avoid numerical instability, while in our case, the additive terms serve to enforce positivity.\nProposition 3. For all g \u2208 G and data points {xi} \u2208 B, the deep Taylor decomposition with the zB-rule is consistent in the sense of Definition 3.\nDetailed derivations of the proposed rules, proofs of Propositions 1, 2 and 3, and algorithms that implement these rules efficiently are given in the supplement. The properties of the relevance propagation techniques considered so far (when applied to functions g \u2208 G), their domain of applicability, their consistency, and other computational properties, are summarized in the table below:\nsensitivity Taylor w2-rule z-rules X = Rd yes yes yes no X = Rd+,B yes yes no yes nearest root on X no yes yes no conservative no no yes yes positive yes yes? yes yes consistent no no yes yes unique solution yes yes yes yes fast computation yes no yes yes\n(?) e.g. using the continuously differentiable approximation of the detection function max(0, x) = limt\u2192\u221e t\u22121 log(0.5+0.5 exp(tx))."
    },
    {
      "heading": "C. Experiment",
      "text": "We now demonstrate empirically the properties of the heatmapping techniques introduced so far on the network of Figure 4 trained to predict whether a MNIST handwritten digit of class 0\u20133 is present in the input image, next to a distractor digit of a different class 4\u20139. The neural network is trained to output xk = 0 if there is no digit to detect in the image and xk = 100 if there is one. We minimize the mean-square error between the true scores {0, 100}, and the neural network output xk. Treating the supervised task as a regression problem forces the network to assign approximately the same amount of relevance to all positive examples, and as little relevance as possible to the negative examples.\nThe input image is of size 28 \u00d7 56 pixels and is coded between \u22120.5 (black) and +1.5 (white). The neural network has 28\u00d756 input neurons {xi}, 400 hidden neurons {xj}, and one output xk. Weights {wij} are initialized using a normal distribution of mean 0 and standard deviation 0.05. Biases {bj} are initialized to zero and constrained to be negative or zero throughout training, in order to meet our specification of the one-layer network. The neural network is trained for 300000 iterations of stochastic gradient descent with a minibatch of size 20 and a small learning rate. Training data is extended with translated versions of MNIST digits. The root {x\u0303i} for the nearest root Taylor method is chosen in our experiments to be the nearest point such that f({x\u0303i}) < 0.1f({xi}). The zB-rule is computed using as a lower- and upper-bounds \u2200i : li = \u22120.5 and hi = 1.5.\nHeatmaps are shown in Figure 5 for sensitivity analysis, nearest root Taylor decomposition, and deep Taylor decomposition with the w2- and zB-rules. In all cases, we observe that the heatmapping procedure correctly assigns most of the relevance to pixels where the digit to detect is located. Sensitivity analysis produces unbalanced and incomplete heatmaps, with some input points reacting strongly, and others reacting weakly, and with a considerable amount of relevance associated to the border of the image, where there is no information. Nearest root Taylor produces selective heatmaps, that are still not fully complete. The heatmaps produced by deep Taylor decomposition with the w2-rule, are similar to nearest root Taylor, but blurred, and not perfectly aligned with the data. The domain-aware zB-rule produces heatmaps that are still blurred, but that are complete and well-aligned with the data.\nFigure 6 quantitatively evaluates heatmapping techniques of Figure 5. The scatter plots compare the total output relevance\nwith the sum of pixel-wise relevances. Each point in the scatter plot is a different data point drawn independently from the input distribution. These scatter plots test empirically for each heatmapping method whether it is conservative in the sense of Definition 1. In particular, if all points lie on the diagonal line of the scatter plot, then \u2211 pRp = Rf , and the heatmapping is conservative. The histograms just below test empirically whether the studied heatmapping methods satisfy positivity in the sense of Definition 2, by counting the number of times (shown on a log-scale) pixel-wise contributions Rp take a certain value. Red color in the histogram indicates positive relevance assignments, and blue color indicates negative relevance assignments. Therefore, an absence of blue bars in the histogram indicates that the heatmap is positive (the desired behavior). Overall, the scatter plots and the histograms produce a complete description of the degree of consistency of the heatmapping techniques in the sense of Definition 3.\nSensitivity analysis only measures a local effect and therefore does not conceptually redistribute relevance onto the input. However, we can still measure the relative strength of computed sensitivities between examples or pixels. The nearest root Taylor approach, although producing mostly positive heatmaps, dissipates a large fraction of the relevance. The deep Taylor decomposition on the other hand ensure full consistency, as theoretically predicted by Propositions 1 and 3.\nThe zB-rule spreads relevance onto more pixels than methods based on nearest root, as shown by the shorter tail of its relevance histogram."
    },
    {
      "heading": "IV. APPLICATION TO DEEP NETWORKS",
      "text": "In order to represent efficiently complex hierarchical problems, one needs deeper architectures. These architectures are typically made of several layers of nonlinearity, where each layer extracts features at different scale. An example of deep architecture is shown in Figure 7 (left). In this example, the input is first processed by feature extractors localized in the pixel space. The resulting features are combined into more complex mid-level features that cover more pixels. Finally, these more complex features are combined in a final stage of nonlinear mapping, that produces a score determining whether the object to detect is present in the input image or not. A practical example of deep network with similar hierarchical architecture, and that is frequently used for image recognition tasks, is the convolutional neural network [43].\nIn Section II and III, we have assumed the existence and knowledge of a functional mapping between the neuron activities at a given layer and relevances in the higher layer. However, in deep architectures, the mapping may be unknown (although it may still exist). In order to redistribute the relevance from the higher layers to the lower layers, one needs\nto make this mapping explicit. For this purpose, we introduce the concept of relevance model.\nA relevance model is a function that maps a set of neuron activations at a given layer to the relevance of a neuron in a higher layer, and whose output can be redistributed onto its input variables, for the purpose of propagating relevance backwards in the network. For the deep network of Figure 7 (left), on can for example, try to predict Rk from {xi}, which then allows us to decompose the predicted relevance Rk into lower-layer relevances {Ri}. For practical purposes, the relevance models we will consider borrow the structure of the one-layer network studied in Section III, and for which we have already derived a deep Taylor decomposition.\nUpper-layer relevance is not only determined by input neuron activations of the considered layer, but also by highlevel information (i.e. abstractions) that have been formed in the top layers of the network. These high-level abstractions are necessary to ensure a global cohesion between low-level parts of the heatmap."
    },
    {
      "heading": "A. Min-Max Relevance Model",
      "text": "We first consider a trainable relevance model of Rk. This relevance model is illustrated in Figure 7-1 and is designed to incorporate both bottom-up and top-down information, in a way that the relevance can still be fully decomposed in terms of input neurons. It is defined as\nyj = max ( 0, \u2211 ixivij + aj )\nR\u0302k = \u2211 jyj .\nwhere aj = min(0, \u2211\nlRlvlj + dj) is a negative bias that depends on upper-layer relevances, and where \u2211 l runs over the detection neurons of that upper-layer. This negative bias plays the role of an inhibitor, in particular, it prevents the activation of the detection unit yj of the relevance model in the case where no upper-level abstraction in {Rl} matches the feature detected in {xi}.\nThe parameters {vij , vlj , dj} of the relevance model are learned by minimization of the mean square error objective\nmin \u2329 (R\u0302k \u2212Rk)2 \u232a ,\nwhere Rk is the true relevance, R\u0302k is the predicted relevance, and \u3008\u00b7\u3009 is the expectation with respect to the data distribution.\nBecause the relevance model has exactly the same structure as the one-layer neural network described in Section III, in particular, because aj is negative and only weakly dependent on the set of neurons {xi}, one can apply the same set of rules for relevance propagation. That is, we compute\nRj = yj (13)\nfor the pooling layer and\nRi = \u2211\nj\nqij\u2211 i\u2032 qi\u2032j Rj (14)\nfor the detection layer, where qij = v2ij , qij = xiv + ij , or qij = xivij \u2212 liv+ij \u2212 hiv\u2212ij if choosing the w2-, z+-, zBrules respectively. This set of equations used to backpropagate relevance from Rk to {Ri}, is approximately conservative, with an approximation error that is determined by how much on average the output of the relevance model R\u0302k differs from the true relevance Rk."
    },
    {
      "heading": "B. Training-Free Relevance Model",
      "text": "A large deep neural network may have taken weeks or months to train, and we should be able to explain it without having to train a relevance model for each neuron. We consider the original feature extractor\nxj = max ( 0, \u2211 ixiwij + bj )\nxk = \u2016{xj}\u2016p where the Lp-norm can represent a variety of pooling operations such as sum-pooling or max-pooling. Assuming that the upper-layer has been explained by the z+-rule, and indexing\n10\nby l the detection neurons of that upper-layer, we can write the relevance Rk as\nRk = \u2211\nl\nxkw + kl\u2211\nk\u2032 xk\u2032w + k\u2032l\nRl\n= (\u2211 jxj ) \u00b7 \u2016{xj}\u2016p\u2016{xj}\u20161 \u00b7 \u2211\nl\nw+klRl\u2211 k\u2032 xk\u2032w + k\u2032l\nThe first term is a linear pooling over detection units that has the same structure as the network of Section III. The second term is a positive Lp/L1 pooling ratio, which is constant under any permutation of neurons {xj}, or multiplication of these neurons by a scalar. The last term is a positive weighted sum of higher-level relevances, that measures the sensitivity of the neuron relevance to its activation. It is mainly determined by the relevance found in higher layers and can be viewed as a top-down contextualization term dk({Rl}). Thus, we rewrite the relevance as\nRk = (\u2211 jxj ) \u00b7 ck \u00b7 dk({Rl})\nwhere the pooling ratio ck > 0 and the top-down term dk({Rl}) > 0 are only weakly dependent on {xj} and are approximated as constant terms. This relevance model is illustrated in Figure 7-2. Because the relevance model above has the same structure as the network of Section III (up to a constant factor), it is easy to derive its Taylor decomposition, in particular one can show that\nRj = xj\u2211 j\u2032 xj\u2032 Rk\nwhere relevance is redistributed in proportion to activations in the detection layer, and that\nRi = \u2211\nj\nqij\u2211 i\u2032 qi\u2032j Rj .\nwhere qij = w2ij , qij = xiw + ij , or qij = xiwij \u2212 liw+ij \u2212hiw\u2212ij if choosing the w2-, z+-, zB-rules respectively. If choosing the z+-rule for that layer again, the same training-free decomposition technique can be applied again to the layer below, and the process can be repeated until the input layer. Thus, when using the training-free relevance model, all layers of the network must be decomposed using the z+-rule, except the first layer for which other rules can be applied such as the w2-rule or the zB-rule.\nThe technical advantages and disadvantages of each heatmapping method are summarized in the table below:\nsensitivity Taylor min-max training-free consistent no no yes\u2020 yes unique solution yes no\u2021 no\u2021 yes training-free yes yes no yes fast computation yes no yes yes\n\u2020 Conservative up to a fitting error between the redistributed relevance and the relevance model output. \u2021 Root finding and relevance model training are in the general case both nonconvex."
    },
    {
      "heading": "C. Experiment on MNIST",
      "text": "We train a neural network with two layers of nonlinearity on the same MNIST problem as in Section III. The neural network is composed of a first detection-pooling layer with 400 detection neurons sum-pooled into 100 units (i.e. we sumpool groups of 4 detection units). A second detection-pooling layer with 400 detection neurons is applied to the resulting 100-dimensional output of the previous layer, and activities are sum-pooled onto a single unit representing the deep network output. In addition, we learn a min-max relevance model for the first layer. The relevance model is trained to minimize the mean-square error between the relevance model output and the true relevance (obtained by application of the z+-rule in the top layer). The deep network and the relevance models are trained using stochastic gradient descent with minibatch size 20, for 300000 iterations, and using a small learning rate.\nFigure 8 shows heatmaps obtained with sensitivity analysis, standard Taylor decomposition, and deep Taylor decomposition with different relevance models. We apply the zB-rule to backpropagate relevance of pooled features onto pixels. Sensitivity analysis and standard Taylor decomposition produce noisy and incomplete heatmaps. These two methods do not handle well the increased depth of the network. The min-max Taylor decomposition and the training-free Taylor decomposition produce relevance maps that are complete, and qualitatively similar to those obtained by deep Taylor decomposition of the shallow architecture in Section III. This demonstrates the high level of transparency of deep Taylor methods with respect to the choice of architecture. The heatmaps obtained by the trained min-max relevance model and by the training-free method are of similar quality.\nSimilar advantageous properties of the deep Taylor decomposition are observed quantitatively in the plots of Figure 9. The standard Taylor decomposition is positive, but dissipates relevance. The deep Taylor decomposition with the min-max relevance model produces near-conservative heatmaps, and the training-free deep Taylor decomposition produces heatmaps that are fully conservative. Both deep Taylor decomposition variants shown here also ensures positivity, due to the application of the zB- and z+-rule in the respective layers."
    },
    {
      "heading": "D. Experiment on ILSVRC",
      "text": "We now apply the fast training-free decomposition to explain decisions made by large neural networks (BVLC Reference CaffeNet [44] and GoogleNet [12]) trained on the dataset of the ImageNet large scale visual recognition challenges ILSVRC 2012 [45] and ILSVRC 2014 [46] respectively. For these models, standard Taylor decomposition methods with root finding are computationally too expensive. We keep the neural networks unchanged.\nThe training-free relevance propagation method is tested on a number of images from Pixabay.com and Wikimedia Commons. The zB-rule is applied to the first convolution layer. For all higher convolution and fully-connected layers, the z+rule is applied. Positive biases (that are not allowed in our deep Taylor framework), are treated as neurons, on which relevance can be redistributed (i.e. we add max(0, bj) in the denominator\n11\nof zB- and z+-rules). Normalization layers are bypassed in the relevance propagation pass. In order to visualize the heatmaps in the pixel space, we sum the relevances of the three color channels, leading to single-channel heatmaps, where the red color designates relevant regions.\nFigure 10 shows the resulting heatmaps for eight different images. Deep Taylor decomposition produces exhaustive heatmaps covering the whole object to detect. On the other hand, sensitivity analysis assigns most of the relevance to a few pixels. Deep Taylor heatmaps for the Caffenet and Googlenet have a high level of similarity, showing the transparency of the heatmapping method to the choice of deep network architecture. However, GoogleNet being more accurate, its corresponding heatmaps are also of better quality, with more heat associated to the truly relevant parts of the image. Heatmaps identify the dorsal fin of the shark, the head of the cat, the flame above the matchsticks, or the wheels of the motorbike. The heatmaps are able to detect two instances of the same object within a same image, for example, the two frogs and the two stupas. The heatmaps also ignore most of the distracting structure, such as the horizontal lines above the cat\u2019s head, the wood pattern behind the matches, or the grass behind the motorcycle. Sometimes, the object to detect is shown in a less stereotypical pose or can be confused with the background. For example, the sheeps in the top-right image are overlapping and superposed to a background of same color,\nand the scooter is difficult to separate from the complex and high contrast urban background. This confuses the network and the heatmapping procedure, and in that case, a significant amount of relevance is lost to the background.\nFigure 11 studies the special case of an image of class \u201cvolcano\u201d, and a zoomed portion of it. On a global scale, the heatmapping method recognizes the characteristic outline of the volcano. On a local scale, the relevance is present on both sides of the edge of the volcano, which is consistent with the fact that the two sides of the edge are necessary to detect it. The zoomed portion of the image also reveals different stride sizes in the first convolution layer between CaffeNet (stride 4) and GoogleNet (stride 2). Therefore, our proposed heatmapping technique produces explanations that are interpretable both at a global and local scale in the pixel space."
    },
    {
      "heading": "V. CONCLUSION",
      "text": "Nonlinear machine learning models have become standard tools in science and industry due to their excellent performance even for large, complex and high-dimensional problems. However, in practice it becomes more and more important to understand the underlying nonlinear model, i.e. to achieve transparency of what aspect of the input makes the model decide.\n12\n13\nTo achieve this, we have contributed by novel conceptual ideas to deconstruct nonlinear models. Specifically, we have proposed a novel relevance propagation approach based on deep Taylor decomposition, that is used to efficiently assess the importance of single pixels in image classification applications. Thus, we are now able to compute heatmaps that clearly and intuitively allow to better understand the role of input pixels when classifying an unseen data point.\nIn particular, we have shed light on theoretical connections between the Taylor decomposition of a function and rule-based relevance propagation techniques, showing a clear relationship between these two approaches for a particular class of neural networks. We have introduced the concept of relevance model as a mean to scale deep Taylor decomposition to neural networks with many layers. Our method is stable under different architectures and datasets, and does not require hyperparameter tuning.\nWe would like to stress, that we are free to use as a starting point of our framework either an own trained and carefully tuned neural network model or we may also download existing pre-trained deep network models (e.g. the Caffe Reference ImageNet Model [44]) that have already been shown to achieve excellent performance on benchmarks. In both cases, our layerwise relevance propagation concept can provide explanation. In other words our approach is orthogonal to the quest for enhanced results on benchmarks, in fact, we can use any benchmark winner and then enhance its transparency to the user."
    },
    {
      "heading": "I. DERIVATIONS OF PROPAGATION RULES",
      "text": "In this section, we give the detailed derivations of propagation rules resulting from deep Taylor decomposition of the neural network of Section III of the paper. Each propagation rule corresponds to different choices of root point {x\u0303i}(j). For the class of networks considered here, the relevance of neurons in the detection layer is given by\nRj = max(0, \u2211 ixiwij + bj), (1)\nwhere bj < 0. All rules derived in this paper are based on the search for a root in a particular search direction {vi}(j) in the input space associated to neuron j:\n{x\u0303i}(j) = {xi}+ t{vi}(j) (2) We need to consider two cases separately:\nC1 = {j : \u2211\nixiwij + bj \u2264 0} = {j : Rj = 0} C2 = {j : \u2211 ixiwij + bj > 0} = {j : Rj > 0}\nIn the first case (j \u2208 C1), the data point itself is already the nearest root point of the function Rj . Therefore,\nxi \u2212 x\u0303(j)i = 0. (3) In the second case (j \u2208 C2), the nearest root point along the defined search direction is given by the intersection of Equation 2 with the plane equation \u2211 i x\u0303 (j) i wij + bj = 0 to which the nearest root belong. In particular, resolving t by injecting (2) into that plane equation, we get\nxi \u2212 x\u0303(j)i = \u2211\ni xiwij + bj\u2211 i v (j) i wij v (j) i (4)\nStarting from the generic relevance propagation formula proposed in Section II we can derive a more specific formula that involve the search directions {vi}(j):\nRi = \u2211\nj\n\u2202Rj \u2202xi \u2223\u2223\u2223 {x\u0303i}(j) \u00b7 (xi \u2212 x\u0303(j)i ) (5)\n= \u2211\nj\u2208C1\n\u2202Rj \u2202xi \u00b7 0 +\n\u2211 j\u2208C2 wij\n\u2211 i xiwij + bj\u2211\ni v (j) i wij\nv (j) i (6)\n= \u2211\nj v (j) i wij\u2211 i v (j) i wij Rj (7)\nFrom (5) to (6) we have considered the two listed cases separately, and injected their corresponding roots found in Equations 3 and 4. From (6) to (7), we have used the fact that the relevance for the case C1 is always zero to recombine both terms.\nThe derivation of the various relevance propagation rules presented in this paper will always follow the same three steps:\n1) Define for each neuron j \u2208 C2 a line or segment in the input space starting from data point {xi} and with direction {vi}(j). 2) Verify that the line or segment lies inside the input domain and includes at least one root of Rj . 3) Inject the search directions {vi}(j) into Equation 7, and obtain the relevance propagation rule as a result.\nAn illustration of the search directions and root points selected by each rule for various relevance functions Rj({xi}) is given in Figure 1.\nA. w2-Rule\nThe w2-rule is obtained by choosing the root of Rj that is nearest to {xi} in Rd. Such nearest root must be searched for on the line including the point {xi}, and with direction corresponding to the gradient of Rj (the ith component of this gradient is wij). Therefore, the components of the search vector are given by\nv (j) i = wij\nThis line is included in the input domain Rd, and always contains a root (the nearest of which is obtained by setting t = \u2212Rj/ \u2211 i w 2 ij in Equation 2). Injecting the defined search direction vi into Equation 7, we get\nRi = \u2211\nj\nw2ij\u2211 i w 2 ij Rj ."
    },
    {
      "heading": "B. z-Rule",
      "text": "The z-rule (originally proposed by [1]) is obtained by choosing the nearest root of Rj on the segment (0, {xi}). This segment is included in all domains considered in this paper (Rd,Rd+,B), provided that {xi} also belongs to these domains. This segment has a root at its first extremity, because Rj(0) = max(0, \u2211 i 0 \u00b7 wij + bj) = max(0, bj) = 0 since bj is negative by design. The direction of this segment on which we search for the nearest root corresponds to the data point itself:\nv (j) i = xi.\nar X\niv :1\n51 2.\n02 47\n9v 1\n[ cs\n.L G\n] 8\nD ec\n2 01\n5\n2 Fig. 1. Illustration of root points (empty circles) found for a given data point (full circle) for various propagation rules, relevance functions, and input domains. Here, for the zB-rule, we have used the bounding box l1 = \u22121, h1 = 1, l2 = \u22121, h2 = 1.\nInjecting this search direction into Equation 7, and defining the weighted activation zij = xiwij , we get\nRi = \u2211\nj\nzij\u2211 i zij Rj .\nC. z+-Rule\nThe z+-rule is obtained by choosing the nearest root on the segment ({xi1wij<0}, {xi}). If {xi} is in Rd+, then, the segment is also in the domain Rd+. The relevance function has a root at the first extremity of the segment:\nRj({xi1wij<0}) = max(0, \u2211 ixi1wij<0wij + bj)\n= max(0, \u2211\nixiw \u2212 ij + bj) = 0,\nsince xi \u2265 0 and w\u2212ij \u2264 0, and therefore xiw\u2212ij \u2264 0, and since bj < 0 by design. The direction of this segment on which we search for the nearest root is given by:\nv (j) i = xi \u2212 xi1wij<0\n= xi1wij\u22650.\nInjecting this search direction into Equation 7, and defining z+ij = xiw + ij with w + ij = 1wij\u22650wij , we get\nRi = z+ij\u2211 i z + ij Rj .\nD. zB-Rule\nThe zB-rule is obtained by choosing the nearest root on the segment ({li1wij>0 +hi1wij<0}, {xi}). Provided that {xi} is in B, the segment is also in B. The relevance function has a root at the first extremity of the segment:\nRj({li1wij>0 + hi1wij<0}) = max(0, \u2211 ili1wij>0wij + hi1wij<0wij + bj)\n= max(0, \u2211\niliw + ij + hiw \u2212 ij + bj) = 0,\nbecause all summed terms are either negative or the product of a negative and positive value. The search direction for this choice of segment is given by\nv (j) i = xi \u2212 li1wij>0 \u2212 hi1wij<0\nInjecting this search direction in to Equation 7, we get\nRi = \u2211\nj\nzij \u2212 liw+ij \u2212 hiw\u2212ij\u2211 i zij \u2212 liw+ij \u2212 hiw\u2212ij Rj ."
    },
    {
      "heading": "II. ALGORITHMS FOR PROPAGATION RULES",
      "text": "We give here algorithms to implement the rules derived in Section I of the supplement. A useful property of these rules is that they can all be expressed in terms of matrix multiplications, thus, making them easily implementable with numerical libraries such as Matlab or Python/Numpy.\nA. w2-Rule Input:\nWeight matrix W = {wij} Upper-layer relevance vector R = {Rj}\nProcedure: V\u2190 W W N\u2190 V ([1] \u00b7 V) return N \u00b7 R\nwhere and denote the element-wise multiplication and division respectively, and [1] is a matrix of ones. Note that for efficiency purposes, the squaring and normalization of the weight matrix can be performed once, and reused for many heatmaps computations."
    },
    {
      "heading": "B. z-Rule",
      "text": "Input:\nWeight matrix W = {wij} Input activations X = {xi} Upper-layer relevance vector R = {Rj}\nProcedure: Z\u2190 W>X return X (W \u00b7 (R Z))\nwhere and denote the element-wise multiplication and division respectively, and where the variable Z is the sum of weighted activations for each upper-layer neuron.\nC. z+-Rule Input:\nWeight matrix W = {wij} Input activations X = {xi} Upper-layer relevance vector R = {Rj}\nProcedure: V\u2190 W+ Z\u2190 V>X return X (V \u00b7 (R Z))\n3 where and denote the element-wise multiplication and division respectively, and where the operation (\u00b7)+ keeps the positive part of the input matrix. For efficiency, like for the w2rule, the matrix V can be precomputed and reused for multiple heatmaps computations.\nD. zB-Rule Input:\nWeight matrix W = {wij} Input activations X = {xi} Upper-layer relevance vector R = {Rj} Lower-bound L = {li} Upper-bound H = {hi}\nProcedure: U\u2190 W\u2212 V\u2190 W+ N\u2190 R (W>X\u2212 V>L\u2212 U>H) return X (W \u00b7 N)\u2212 L (V \u00b7 N)\u2212 H (U \u00b7 N)\nwhere and denote the element-wise multiplication and division respectively, and where the operations (\u00b7)+, (\u00b7)\u2212 keep the positive part and the negative part of the input matrix respectively. For efficiency, like for the previous rules, the matrices U and V can be precomputed and reused for multiple heatmaps computations."
    },
    {
      "heading": "III. PROOFS OF PROPOSITIONS",
      "text": "Definition 1. A heatmapping R(x) is conservative if the sum of assigned relevances in the pixel space corresponds to the total relevance detected by the model, that is\n\u2200x : f(x) = \u2211\np\nRp(x).\nDefinition 2. A heatmapping R(x) is positive if all values forming the heatmap are greater or equal to zero, that is:\n\u2200x, p : Rp(x) \u2265 0 Definition 3. A heatmapping R(x) is consistent if it is conservative and positive. That is, it is consistent if it complies with Definitions 1 and 2.\nProposition 1. For all g \u2208 G, the deep Taylor decomposition with the w2-rule is consistent in the sense of Definition 3.\nProof: We first show that the heatmapping is conservative:\n\u2211\ni\nRi = \u2211\ni\n(\u2211\nj\nw2ij\u2211 i w 2 ij Rj\n)\n= \u2211\nj\n\u2211 i w\n2 ij\u2211\ni w 2 ij\nRj = \u2211\nj\nRj = \u2211\nj\nxj = f(x).\nwhere we have assumed the weights to be never exactly zero. Then, we show that the heatmapping is positive:\nRi = \u2211\nj\nw2ij\u2211 i w 2 ij Rj = \u2211\nj w2ij\ufe38\ufe37\ufe37\ufe38 >0 \u00b7 1\u2211 i w 2 ij\ufe38 \ufe37\ufe37 \ufe38\n>0\n\u00b7 Rj\ufe38\ufe37\ufe37\ufe38 \u22650 \u2265 0.\nTherefore, because the heatmapping is both conservative and positive, it is also consistent.\nFor the case where \u2211\ni w 2 ij = 0, it implies that wij = 0\nfor all i and therefore zij = 0 for all i too. Because bj \u2264 0, then Rj = xj = 0 (there is no relevance to redistribute to the lower layer).\nProposition 2. For all g \u2208 G and data points {xi} \u2208 Rd+, the deep Taylor decomposition with the z+-rule is consistent in the sense of Definition 3.\nProof: The proof is the same as for Proposition 1 for the case where \u2211 i z + ij > 0. We simply replace w 2 ij by z + ij in the proof. For the case where \u2211 i z + ij = 0, it implies that zij \u2264 0 for all i. Because bj \u2264 0, then Rj = xj = 0 (there is no relevance to redistribute to the lower layer).\nProposition 3. For all g \u2208 G and data points {xi} \u2208 B, the deep Taylor decomposition with the zB-rule is consistent in the sense of Definition 3.\nProof: We first show that the numerator of the zB-rule qij = zij \u2212 liw+ij \u2212 hiw\u2212ij is greater or equal than zero for {xi} \u2208 B:\nqij = zij \u2212 liw+ij \u2212 hiw\u2212ij = xiwij \u2212 liw+ij \u2212 hiw\u2212ij = xi(w \u2212 ij + w + ij)\u2212 liw+ij \u2212 hiw\u2212ij\n= (xi \u2212 hi)\ufe38 \ufe37\ufe37 \ufe38 \u22640 \u00b7 w\u2212ij\ufe38\ufe37\ufe37\ufe38 \u22640 +(xi \u2212 li)\ufe38 \ufe37\ufe37 \ufe38 \u22650 \u00b7 w+ij\ufe38\ufe37\ufe37\ufe38 \u22650 \u2265 0\nThen, the proof is the same as for Proposition 1 for the case where \u2211 i qij > 0. We simply replace w 2 ij by qij in the\nproof. For the case where \u2211\ni qij = 0, we will show that the contributions zij of the inputs to the detection neurons cannot be positive, and that there is therefore no relevance that needs to be redistributed. The equality \u2211 i qij = 0 implies that \u2200i : qij = 0, which can be satisfied by one of the four sets of conditions:\na) xi = hi and xi = li: In that case xi = 0 (because li \u2264 0 and hi \u2265 0), and therefore zij = 0 \u00b7 wij = 0.\nb) xi = hi and w+ij = 0: In that case, zij = hiwij , and because hi \u2265 0, then zij \u2264 0.\nc) w\u2212ij = 0 and xi = li: In that case, zij = liwij , and because li \u2264 0, then zij \u2264 0.\nd) w\u2212ij = 0 and w + ij = 0: In that case, wij = 0, and therefore, zij = xi \u00b7 0 = 0. Therefore, inputs are in all cases prevented from contributing positively to the neuron xj . In particular, the total contribution is given by zj = \u2211 i zij \u2264 0. Because bj \u2264 0, then Rj = xj = 0 (there is no relevance to redistribute to the lower layer)."
    },
    {
      "heading": "IV. EMPIRICAL COMPARISON WITH LRP",
      "text": "In this section, we compare heatmaps produced by the rules based on deep Taylor decomposition, and the layer-wise\n4 relevance propagation (LRP) rules proposed by [1]. The last rules include in particular, the \u03b1\u03b2-rule:\nRi = \u2211\nj\n( \u03b1 z+ij\u2211 i z + ij + b + j \u2212 \u03b2 z\u2212ij\u2211 i z \u2212 ij + b \u2212 j ) Rj ,\nwhere \u03b1\u2212 \u03b2 = 1, and the -stabilized rule:\nRi = \u2211\nj\nzij s( \u2211\ni zij + bj) Rj ,\nwhere s(t) = t+ (1t\u22650\u22121t<0) is a stabilizing function whose output is never zero. The respective hyperparameters \u03b1 and of these rules are typically selected such that the produced heatmaps have the desired quality.\nFigure 2 and 3 compare heatmaps obtained by applying deep Taylor and LRP to the one-layer and two-layer networks considered in this paper for the MNIST problem. In the twolayer case, deep Taylor uses the min-max relevance model. LRP applies the same rules in both layers. Figure 4 compares heatmaps obtained by deep Taylor and LRP on the BVLC CaffeNet and the GoogleNet. For deep Taylor, we use the trainingfree relevance model. Normalization layers are ignored in the backward pass.\nIt can be observed that the quality of the deep Taylor heatmaps is less influenced by the choice of model and dataset than LRP with a fixed set of parameters. Deep Taylor heatmaps look similar in all cases. LRP also produces high-quality heatmaps, but the best parameters differ in each setting. For example, the parameters \u03b1 = 2, \u03b2 = 1 perform well for the CaffeNet, but tend to produce too sparse heatmaps for the GoogleNet, or to produce a large amount of negative relevance on the MNIST dataset. Various parameters of LRP produce various artefacts such as the presence of residual relevance on the irrelevant MNIST digit, or the presence of negative relevance in the black areas of the MNIST images. On the other hand, LRP-based heatmaps are sharper than Taylor-based heatmaps and less subject to the stride artefact that arises with convolutional neural networks. They also tend to assign very little evidence to irrelevant parts of the image. Future work will seek to identify the reason for the superiority of LRP on these particular aspects, and investigate whether the deep Taylor decomposition method and its underlying principles can be refined to incorporate these desirable properties of a heatmap while retaining its stability."
    }
  ],
  "title": "Explaining NonLinear Classification Decisions with Deep Taylor Decomposition",
  "year": 2018
}
